
ACTUAL 2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000544  08000544  00010544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  0800055c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08000564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020028  2**0
                  CONTENTS
 10 .bss          000000e8  20000028  20000028  00020028  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000110  20000110  00020028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001207  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000048e  00000000  00000000  000212a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000d0  00000000  00000000  00021730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008f  00000000  00000000  00021800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000159a2  00000000  00000000  0002188f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000d6f  00000000  00000000  00037231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000762f1  00000000  00000000  00037fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000274  00000000  00000000  000ae294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  000ae508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800052c 	.word	0x0800052c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	0800052c 	.word	0x0800052c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:




int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0

	uint8_t *string_to_send = "This is a string !\r\n";
 8000216:	4b08      	ldr	r3, [pc, #32]	; (8000238 <main+0x28>)
 8000218:	607b      	str	r3, [r7, #4]
	enable_clocks();
 800021a:	f000 f929 	bl	8000470 <enable_clocks>

	void (*completion_function)(uint32_t) = &LED_string;
 800021e:	4b07      	ldr	r3, [pc, #28]	; (800023c <main+0x2c>)
 8000220:	603b      	str	r3, [r7, #0]


	SerialInitialise(BAUD_115200, &USART1_PORT, completion_function);
 8000222:	683a      	ldr	r2, [r7, #0]
 8000224:	4906      	ldr	r1, [pc, #24]	; (8000240 <main+0x30>)
 8000226:	2004      	movs	r0, #4
 8000228:	f000 f80c 	bl	8000244 <SerialInitialise>
	initialise_board();
 800022c:	f000 f8f4 	bl	8000418 <initialise_board>

	NVIC_EnableIRQ(USART1_IRQn);
 8000230:	2025      	movs	r0, #37	; 0x25
 8000232:	f7ff ffcf 	bl	80001d4 <__NVIC_EnableIRQ>

	/* Loop forever */
	for(;;) {
 8000236:	e7fe      	b.n	8000236 <main+0x26>
 8000238:	08000544 	.word	0x08000544
 800023c:	080003d1 	.word	0x080003d1
 8000240:	20000000 	.word	0x20000000

08000244 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000244:	b480      	push	{r7}
 8000246:	b087      	sub	sp, #28
 8000248:	af00      	add	r7, sp, #0
 800024a:	60f8      	str	r0, [r7, #12]
 800024c:	60b9      	str	r1, [r7, #8]
 800024e:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000250:	68bb      	ldr	r3, [r7, #8]
 8000252:	687a      	ldr	r2, [r7, #4]
 8000254:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000256:	4b3a      	ldr	r3, [pc, #232]	; (8000340 <SerialInitialise+0xfc>)
 8000258:	69db      	ldr	r3, [r3, #28]
 800025a:	4a39      	ldr	r2, [pc, #228]	; (8000340 <SerialInitialise+0xfc>)
 800025c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000260:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000262:	4b37      	ldr	r3, [pc, #220]	; (8000340 <SerialInitialise+0xfc>)
 8000264:	699b      	ldr	r3, [r3, #24]
 8000266:	4a36      	ldr	r2, [pc, #216]	; (8000340 <SerialInitialise+0xfc>)
 8000268:	f043 0301 	orr.w	r3, r3, #1
 800026c:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	691a      	ldr	r2, [r3, #16]
 8000272:	4b33      	ldr	r3, [pc, #204]	; (8000340 <SerialInitialise+0xfc>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4932      	ldr	r1, [pc, #200]	; (8000340 <SerialInitialise+0xfc>)
 8000278:	4313      	orrs	r3, r2
 800027a:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	685b      	ldr	r3, [r3, #4]
 8000280:	68ba      	ldr	r2, [r7, #8]
 8000282:	6952      	ldr	r2, [r2, #20]
 8000284:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	6992      	ldr	r2, [r2, #24]
 800028e:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	69d9      	ldr	r1, [r3, #28]
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	6a1a      	ldr	r2, [r3, #32]
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	430a      	orrs	r2, r1
 80002a0:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	6a19      	ldr	r1, [r3, #32]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	430a      	orrs	r2, r1
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	68da      	ldr	r2, [r3, #12]
 80002b8:	4b21      	ldr	r3, [pc, #132]	; (8000340 <SerialInitialise+0xfc>)
 80002ba:	69db      	ldr	r3, [r3, #28]
 80002bc:	4920      	ldr	r1, [pc, #128]	; (8000340 <SerialInitialise+0xfc>)
 80002be:	4313      	orrs	r3, r2
 80002c0:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	689a      	ldr	r2, [r3, #8]
 80002c6:	4b1e      	ldr	r3, [pc, #120]	; (8000340 <SerialInitialise+0xfc>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	491d      	ldr	r1, [pc, #116]	; (8000340 <SerialInitialise+0xfc>)
 80002cc:	4313      	orrs	r3, r2
 80002ce:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	330c      	adds	r3, #12
 80002d6:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	2b04      	cmp	r3, #4
 80002dc:	d822      	bhi.n	8000324 <SerialInitialise+0xe0>
 80002de:	a201      	add	r2, pc, #4	; (adr r2, 80002e4 <SerialInitialise+0xa0>)
 80002e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e4:	080002f9 	.word	0x080002f9
 80002e8:	08000303 	.word	0x08000303
 80002ec:	0800030d 	.word	0x0800030d
 80002f0:	08000315 	.word	0x08000315
 80002f4:	0800031d 	.word	0x0800031d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x342;  // 115200 at 8MHz
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	f240 3242 	movw	r2, #834	; 0x342
 80002fe:	801a      	strh	r2, [r3, #0]
		break;
 8000300:	e010      	b.n	8000324 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1a1;  // 115200 at 8MHz
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000308:	801a      	strh	r2, [r3, #0]
		break;
 800030a:	e00b      	b.n	8000324 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xd1;  // 115200 at 8MHz
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	22d1      	movs	r2, #209	; 0xd1
 8000310:	801a      	strh	r2, [r3, #0]
		break;
 8000312:	e007      	b.n	8000324 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8b;  // 115200 at 8MHz
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	228b      	movs	r2, #139	; 0x8b
 8000318:	801a      	strh	r2, [r3, #0]
		break;
 800031a:	e003      	b.n	8000324 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	2246      	movs	r2, #70	; 0x46
 8000320:	801a      	strh	r2, [r3, #0]
		break;
 8000322:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	68bb      	ldr	r3, [r7, #8]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	bf00      	nop
 8000336:	371c      	adds	r7, #28
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000

08000344 <SerialReadChar>:

	//serial_port->completion_function(counter);
}


uint8_t SerialReadChar(uint8_t *incoming_buffer, SerialPort *serial_port) {
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]

	static uint8_t buffer_counter = 0;


	if (((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0)) {
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	f003 030a 	and.w	r3, r3, #10
 8000358:	2b00      	cmp	r3, #0
 800035a:	d008      	beq.n	800036e <SerialReadChar+0x2a>
		// set the flags ORECF and FECF to 1
		serial_port->UART->ICR = serial_port->UART->ICR | (1 << 3 | 1 << 1);
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	6a1a      	ldr	r2, [r3, #32]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f042 020a 	orr.w	r2, r2, #10
 800036a:	621a      	str	r2, [r3, #32]
 800036c:	e028      	b.n	80003c0 <SerialReadChar+0x7c>
	}


	else{
		incoming_buffer[buffer_counter] = serial_port->UART->RDR;
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b15      	ldr	r3, [pc, #84]	; (80003cc <SerialReadChar+0x88>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4619      	mov	r1, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	440b      	add	r3, r1
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	701a      	strb	r2, [r3, #0]

		serial_port->UART->RQR |= (1 << 3 | 1 << 1);
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	699a      	ldr	r2, [r3, #24]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f042 020a 	orr.w	r2, r2, #10
 8000392:	619a      	str	r2, [r3, #24]

		if (incoming_buffer[buffer_counter] == '+'){
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <SerialReadChar+0x88>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	461a      	mov	r2, r3
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4413      	add	r3, r2
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	2b2b      	cmp	r3, #43	; 0x2b
 80003a2:	d107      	bne.n	80003b4 <SerialReadChar+0x70>
			buffer_counter++;
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <SerialReadChar+0x88>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	3301      	adds	r3, #1
 80003aa:	b2da      	uxtb	r2, r3
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <SerialReadChar+0x88>)
 80003ae:	701a      	strb	r2, [r3, #0]
			return 1;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e005      	b.n	80003c0 <SerialReadChar+0x7c>
		}
		buffer_counter++;
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <SerialReadChar+0x88>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	3301      	adds	r3, #1
 80003ba:	b2da      	uxtb	r2, r3
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <SerialReadChar+0x88>)
 80003be:	701a      	strb	r2, [r3, #0]
	}

}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	2000010d 	.word	0x2000010d

080003d0 <LED_string>:
		incoming_buffer++;
	}
	serial_port->completion_function((incoming_buffer - (counter-1)), counter);
}

void LED_string(uint8_t *string, uint32_t counter) {
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
 80003d8:	6039      	str	r1, [r7, #0]
	uint16_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <LED_string+0x44>)
 80003dc:	60bb      	str	r3, [r7, #8]

	for(int i = 0; (i-1) < counter; i++) {
 80003de:	2300      	movs	r3, #0
 80003e0:	60fb      	str	r3, [r7, #12]
 80003e2:	e009      	b.n	80003f8 <LED_string+0x28>
		//string = string + i;
		*led_register = string[i]; //I am unable to write into the led_register
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	b29a      	uxth	r2, r3
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	801a      	strh	r2, [r3, #0]
	for(int i = 0; (i-1) < counter; i++) {
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	3301      	adds	r3, #1
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	461a      	mov	r2, r3
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	4293      	cmp	r3, r2
 8000402:	d8ef      	bhi.n	80003e4 <LED_string+0x14>
//		delay_function(); //Insert the delay function from Kyan

	}
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop
 8000408:	3714      	adds	r7, #20
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	48001015 	.word	0x48001015

08000418 <initialise_board>:

void initialise_board() {
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <initialise_board+0x20>)
 8000420:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f245 5255 	movw	r2, #21845	; 0x5555
 8000428:	801a      	strh	r2, [r3, #0]
}
 800042a:	bf00      	nop
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	48001002 	.word	0x48001002

0800043c <USART1_EXTI25_IRQHandler>:

uint8_t terminating_char_sent = 0;


void USART1_EXTI25_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

	terminating_char_sent = SerialReadChar(incoming_buffer, &USART1_PORT);
 8000440:	4907      	ldr	r1, [pc, #28]	; (8000460 <USART1_EXTI25_IRQHandler+0x24>)
 8000442:	4808      	ldr	r0, [pc, #32]	; (8000464 <USART1_EXTI25_IRQHandler+0x28>)
 8000444:	f7ff ff7e 	bl	8000344 <SerialReadChar>
 8000448:	4603      	mov	r3, r0
 800044a:	461a      	mov	r2, r3
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <USART1_EXTI25_IRQHandler+0x2c>)
 800044e:	701a      	strb	r2, [r3, #0]
	EXTI->PR |= EXTI_PR_PR0;
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <USART1_EXTI25_IRQHandler+0x30>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a05      	ldr	r2, [pc, #20]	; (800046c <USART1_EXTI25_IRQHandler+0x30>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6153      	str	r3, [r2, #20]
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000000 	.word	0x20000000
 8000464:	20000044 	.word	0x20000044
 8000468:	2000010c 	.word	0x2000010c
 800046c:	40010400 	.word	0x40010400

08000470 <enable_clocks>:




void enable_clocks() {
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <enable_clocks+0x1c>)
 8000476:	695b      	ldr	r3, [r3, #20]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <enable_clocks+0x1c>)
 800047a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800047e:	6153      	str	r3, [r2, #20]

}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40021000 	.word	0x40021000

08000490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x6>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopForever+0xe>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopForever+0x16>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004be:	f000 f811 	bl	80004e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c2:	f7ff fea5 	bl	8000210 <main>

080004c6 <LoopForever>:

LoopForever:
  b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   r0, =_estack
 80004c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80004d4:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004d8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80004dc:	20000110 	.word	0x20000110

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <__libc_init_array>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	4d0d      	ldr	r5, [pc, #52]	; (800051c <__libc_init_array+0x38>)
 80004e8:	4c0d      	ldr	r4, [pc, #52]	; (8000520 <__libc_init_array+0x3c>)
 80004ea:	1b64      	subs	r4, r4, r5
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	2600      	movs	r6, #0
 80004f0:	42a6      	cmp	r6, r4
 80004f2:	d109      	bne.n	8000508 <__libc_init_array+0x24>
 80004f4:	4d0b      	ldr	r5, [pc, #44]	; (8000524 <__libc_init_array+0x40>)
 80004f6:	4c0c      	ldr	r4, [pc, #48]	; (8000528 <__libc_init_array+0x44>)
 80004f8:	f000 f818 	bl	800052c <_init>
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	2600      	movs	r6, #0
 8000502:	42a6      	cmp	r6, r4
 8000504:	d105      	bne.n	8000512 <__libc_init_array+0x2e>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	f855 3b04 	ldr.w	r3, [r5], #4
 800050c:	4798      	blx	r3
 800050e:	3601      	adds	r6, #1
 8000510:	e7ee      	b.n	80004f0 <__libc_init_array+0xc>
 8000512:	f855 3b04 	ldr.w	r3, [r5], #4
 8000516:	4798      	blx	r3
 8000518:	3601      	adds	r6, #1
 800051a:	e7f2      	b.n	8000502 <__libc_init_array+0x1e>
 800051c:	0800055c 	.word	0x0800055c
 8000520:	0800055c 	.word	0x0800055c
 8000524:	0800055c 	.word	0x0800055c
 8000528:	08000560 	.word	0x08000560

0800052c <_init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr

08000538 <_fini>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr
