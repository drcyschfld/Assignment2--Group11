
Advanced Functionality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000508  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800069c  0800069c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800069c  0800069c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800069c  0800069c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800069c  0800069c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800069c  0800069c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006a0  080006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080006a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000060  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000008c  2000008c  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000014db  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000056c  00000000  00000000  0002157a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000f0  00000000  00000000  00021ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000a7  00000000  00000000  00021bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000159a2  00000000  00000000  00021c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000e69  00000000  00000000  00037621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00076384  00000000  00000000  0003848a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000002fc  00000000  00000000  000ae810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  000aeb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000684 	.word	0x08000684

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000684 	.word	0x08000684

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <USART1_EXTI25_IRQHandler>:
#endif



void USART1_EXTI25_IRQHandler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0

		read_into_kernel();
 8000214:	f000 f968 	bl	80004e8 <read_into_kernel>

	EXTI->PR |= EXTI_PR_PR0;
 8000218:	4b03      	ldr	r3, [pc, #12]	; (8000228 <USART1_EXTI25_IRQHandler+0x18>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a02      	ldr	r2, [pc, #8]	; (8000228 <USART1_EXTI25_IRQHandler+0x18>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6153      	str	r3, [r2, #20]
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40010400 	.word	0x40010400

0800022c <enable_clocks>:
		// waste time !
	}
}


void enable_clocks() {
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <enable_clocks+0x1c>)
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <enable_clocks+0x1c>)
 8000236:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800023a:	6153      	str	r3, [r2, #20]

}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	40021000 	.word	0x40021000

0800024c <main>:

int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b0b4      	sub	sp, #208	; 0xd0
 8000250:	af00      	add	r7, sp, #0

	uint8_t received_string[200];
	uint8_t current_string_length = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	enable_clocks();
 8000258:	f7ff ffe8 	bl	800022c <enable_clocks>

	void (*completion_function)(uint32_t) = &LED_string;
 800025c:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <main+0x44>)
 800025e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

	//LED_string(4, (string_to_send + 4));

	SerialInitialise(BAUD_115200, &USART1_PORT, completion_function);
 8000262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000266:	490b      	ldr	r1, [pc, #44]	; (8000294 <main+0x48>)
 8000268:	2004      	movs	r0, #4
 800026a:	f000 f815 	bl	8000298 <SerialInitialise>
	initialise_board();
 800026e:	f000 f909 	bl	8000484 <initialise_board>

	NVIC_EnableIRQ(USART1_IRQn);
 8000272:	2025      	movs	r0, #37	; 0x25
 8000274:	f7ff ffae 	bl	80001d4 <__NVIC_EnableIRQ>


	/* Loop forever */
	for(;;) {
		current_string_length = Receive_Data(received_string, current_string_length);
 8000278:	f897 20cf 	ldrb.w	r2, [r7, #207]	; 0xcf
 800027c:	463b      	mov	r3, r7
 800027e:	4611      	mov	r1, r2
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f981 	bl	8000588 <Receive_Data>
 8000286:	4603      	mov	r3, r0
 8000288:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf
 800028c:	e7f4      	b.n	8000278 <main+0x2c>
 800028e:	bf00      	nop
 8000290:	0800043d 	.word	0x0800043d
 8000294:	20000004 	.word	0x20000004

08000298 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000298:	b480      	push	{r7}
 800029a:	b087      	sub	sp, #28
 800029c:	af00      	add	r7, sp, #0
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	687a      	ldr	r2, [r7, #4]
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002aa:	4b3a      	ldr	r3, [pc, #232]	; (8000394 <SerialInitialise+0xfc>)
 80002ac:	69db      	ldr	r3, [r3, #28]
 80002ae:	4a39      	ldr	r2, [pc, #228]	; (8000394 <SerialInitialise+0xfc>)
 80002b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b4:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002b6:	4b37      	ldr	r3, [pc, #220]	; (8000394 <SerialInitialise+0xfc>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a36      	ldr	r2, [pc, #216]	; (8000394 <SerialInitialise+0xfc>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	691a      	ldr	r2, [r3, #16]
 80002c6:	4b33      	ldr	r3, [pc, #204]	; (8000394 <SerialInitialise+0xfc>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	4932      	ldr	r1, [pc, #200]	; (8000394 <SerialInitialise+0xfc>)
 80002cc:	4313      	orrs	r3, r2
 80002ce:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	68ba      	ldr	r2, [r7, #8]
 80002d6:	6952      	ldr	r2, [r2, #20]
 80002d8:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	685b      	ldr	r3, [r3, #4]
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	6992      	ldr	r2, [r2, #24]
 80002e2:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	69d9      	ldr	r1, [r3, #28]
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	6a1a      	ldr	r2, [r3, #32]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	430a      	orrs	r2, r1
 80002f4:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	6a19      	ldr	r1, [r3, #32]
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	430a      	orrs	r2, r1
 8000306:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	68da      	ldr	r2, [r3, #12]
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <SerialInitialise+0xfc>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4920      	ldr	r1, [pc, #128]	; (8000394 <SerialInitialise+0xfc>)
 8000312:	4313      	orrs	r3, r2
 8000314:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	689a      	ldr	r2, [r3, #8]
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <SerialInitialise+0xfc>)
 800031c:	699b      	ldr	r3, [r3, #24]
 800031e:	491d      	ldr	r1, [pc, #116]	; (8000394 <SerialInitialise+0xfc>)
 8000320:	4313      	orrs	r3, r2
 8000322:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	330c      	adds	r3, #12
 800032a:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	2b04      	cmp	r3, #4
 8000330:	d822      	bhi.n	8000378 <SerialInitialise+0xe0>
 8000332:	a201      	add	r2, pc, #4	; (adr r2, 8000338 <SerialInitialise+0xa0>)
 8000334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000338:	0800034d 	.word	0x0800034d
 800033c:	08000357 	.word	0x08000357
 8000340:	08000361 	.word	0x08000361
 8000344:	08000369 	.word	0x08000369
 8000348:	08000371 	.word	0x08000371
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x342;  // 115200 at 8MHz
 800034c:	697b      	ldr	r3, [r7, #20]
 800034e:	f240 3242 	movw	r2, #834	; 0x342
 8000352:	801a      	strh	r2, [r3, #0]
		break;
 8000354:	e010      	b.n	8000378 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1a1;  // 115200 at 8MHz
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	f240 12a1 	movw	r2, #417	; 0x1a1
 800035c:	801a      	strh	r2, [r3, #0]
		break;
 800035e:	e00b      	b.n	8000378 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xd1;  // 115200 at 8MHz
 8000360:	697b      	ldr	r3, [r7, #20]
 8000362:	22d1      	movs	r2, #209	; 0xd1
 8000364:	801a      	strh	r2, [r3, #0]
		break;
 8000366:	e007      	b.n	8000378 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8b;  // 115200 at 8MHz
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	228b      	movs	r2, #139	; 0x8b
 800036c:	801a      	strh	r2, [r3, #0]
		break;
 800036e:	e003      	b.n	8000378 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	2246      	movs	r2, #70	; 0x46
 8000374:	801a      	strh	r2, [r3, #0]
		break;
 8000376:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 8000386:	601a      	str	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	371c      	adds	r7, #28
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	40021000 	.word	0x40021000

08000398 <SerialReadChar>:

	//serial_port->completion_function(counter);
}


uint8_t SerialReadChar(uint8_t *incoming_buffer, SerialPort *serial_port) {
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]

	if (((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0)) {
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	69db      	ldr	r3, [r3, #28]
 80003a8:	f003 030a 	and.w	r3, r3, #10
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <SerialReadChar+0x2a>
		// set the flags ORECF and FECF to 1
		serial_port->UART->ICR = serial_port->UART->ICR | (1 << 3 | 1 << 1);
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	6a1a      	ldr	r2, [r3, #32]
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f042 020a 	orr.w	r2, r2, #10
 80003be:	621a      	str	r2, [r3, #32]
 80003c0:	e032      	b.n	8000428 <SerialReadChar+0x90>
	}

	else{
		incoming_buffer[buffer_counter[uartKernel]] = serial_port->UART->RDR;
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <SerialReadChar+0x9c>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	4619      	mov	r1, r3
 80003d0:	4b19      	ldr	r3, [pc, #100]	; (8000438 <SerialReadChar+0xa0>)
 80003d2:	5c5b      	ldrb	r3, [r3, r1]
 80003d4:	4619      	mov	r1, r3
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	440b      	add	r3, r1
 80003da:	b2d2      	uxtb	r2, r2
 80003dc:	701a      	strb	r2, [r3, #0]

		serial_port->UART->RQR |= (1 << 3);
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	699a      	ldr	r2, [r3, #24]
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f042 0208 	orr.w	r2, r2, #8
 80003ec:	619a      	str	r2, [r3, #24]

		if (incoming_buffer[buffer_counter[uartKernel]] == '+'){
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <SerialReadChar+0x9c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <SerialReadChar+0xa0>)
 80003f6:	5c9b      	ldrb	r3, [r3, r2]
 80003f8:	461a      	mov	r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4413      	add	r3, r2
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b2b      	cmp	r3, #43	; 0x2b
 8000402:	d109      	bne.n	8000418 <SerialReadChar+0x80>
			buffer_counter[uartKernel]++;
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SerialReadChar+0x9c>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <SerialReadChar+0xa0>)
 800040a:	5cd2      	ldrb	r2, [r2, r3]
 800040c:	3201      	adds	r2, #1
 800040e:	b2d1      	uxtb	r1, r2
 8000410:	4a09      	ldr	r2, [pc, #36]	; (8000438 <SerialReadChar+0xa0>)
 8000412:	54d1      	strb	r1, [r2, r3]
			return 1;
 8000414:	2301      	movs	r3, #1
 8000416:	e007      	b.n	8000428 <SerialReadChar+0x90>
		}
		buffer_counter[uartKernel]++;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SerialReadChar+0x9c>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4a06      	ldr	r2, [pc, #24]	; (8000438 <SerialReadChar+0xa0>)
 800041e:	5cd2      	ldrb	r2, [r2, r3]
 8000420:	3201      	adds	r2, #1
 8000422:	b2d1      	uxtb	r1, r2
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <SerialReadChar+0xa0>)
 8000426:	54d1      	strb	r1, [r2, r3]
	}

}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000432:	4770      	bx	lr
 8000434:	2000008a 	.word	0x2000008a
 8000438:	20000088 	.word	0x20000088

0800043c <LED_string>:
		incoming_buffer++;
	}
	serial_port->completion_function((incoming_buffer - (counter-1)), counter);
}

void LED_string(uint8_t *string, uint32_t counter) {
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
	uint16_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <LED_string+0x44>)
 8000448:	60bb      	str	r3, [r7, #8]

	for(int i = 0; (i-1) < counter; i++) {
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	e009      	b.n	8000464 <LED_string+0x28>
		//string = string + i;
		*led_register = string[i]; //I am unable to write into the led_register
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	4413      	add	r3, r2
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	b29a      	uxth	r2, r3
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	801a      	strh	r2, [r3, #0]
	for(int i = 0; (i-1) < counter; i++) {
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	3301      	adds	r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	3b01      	subs	r3, #1
 8000468:	461a      	mov	r2, r3
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	4293      	cmp	r3, r2
 800046e:	d8ef      	bhi.n	8000450 <LED_string+0x14>
//		delay_function(); //Insert the delay function from Kyan

	}
}
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	3714      	adds	r7, #20
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	48001015 	.word	0x48001015

08000484 <initialise_board>:

void initialise_board() {
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <initialise_board+0x20>)
 800048c:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f245 5255 	movw	r2, #21845	; 0x5555
 8000494:	801a      	strh	r2, [r3, #0]
}
 8000496:	bf00      	nop
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	48001002 	.word	0x48001002

080004a8 <switch_buffers>:

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}

void switch_buffers() {
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
	uartUser = (!uartUser) & 0x01;
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <switch_buffers+0x38>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	bf0c      	ite	eq
 80004b4:	2301      	moveq	r3, #1
 80004b6:	2300      	movne	r3, #0
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	461a      	mov	r2, r3
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <switch_buffers+0x38>)
 80004be:	701a      	strb	r2, [r3, #0]
	uartKernel = (!uartKernel) & 0x01;
 80004c0:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <switch_buffers+0x3c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	bf0c      	ite	eq
 80004c8:	2301      	moveq	r3, #1
 80004ca:	2300      	movne	r3, #0
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <switch_buffers+0x3c>)
 80004d2:	701a      	strb	r2, [r3, #0]

	//buffer_counter[uartKernel] = 0;
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000
 80004e4:	2000008a 	.word	0x2000008a

080004e8 <read_into_kernel>:

void read_into_kernel(){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

	SerialReadChar(double_buffer[uartKernel], &USART1_PORT);
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <read_into_kernel+0x1c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	015b      	lsls	r3, r3, #5
 80004f2:	4a05      	ldr	r2, [pc, #20]	; (8000508 <read_into_kernel+0x20>)
 80004f4:	4413      	add	r3, r2
 80004f6:	4905      	ldr	r1, [pc, #20]	; (800050c <read_into_kernel+0x24>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff4d 	bl	8000398 <SerialReadChar>
	//buffer_counter[uartKernel]++;

}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	2000008a 	.word	0x2000008a
 8000508:	20000048 	.word	0x20000048
 800050c:	20000004 	.word	0x20000004

08000510 <read_from_user_buffer>:

uint8_t read_from_user_buffer(uint8_t *string_memory, uint8_t current_string_length){
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	460b      	mov	r3, r1
 800051a:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; i < buffer_counter[uartUser]; i++){
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e015      	b.n	800054e <read_from_user_buffer+0x3e>
		string_memory[current_string_length + i] = double_buffer[uartUser][i];
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <read_from_user_buffer+0x6c>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	78fa      	ldrb	r2, [r7, #3]
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	4413      	add	r3, r2
 800052e:	461a      	mov	r2, r3
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4413      	add	r3, r2
 8000534:	4912      	ldr	r1, [pc, #72]	; (8000580 <read_from_user_buffer+0x70>)
 8000536:	0142      	lsls	r2, r0, #5
 8000538:	4411      	add	r1, r2
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	440a      	add	r2, r1
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	701a      	strb	r2, [r3, #0]
		current_string_length++;
 8000542:	78fb      	ldrb	r3, [r7, #3]
 8000544:	3301      	adds	r3, #1
 8000546:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < buffer_counter[uartUser]; i++){
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	3301      	adds	r3, #1
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <read_from_user_buffer+0x6c>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <read_from_user_buffer+0x74>)
 8000556:	5c9b      	ldrb	r3, [r3, r2]
 8000558:	461a      	mov	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4293      	cmp	r3, r2
 800055e:	dbe0      	blt.n	8000522 <read_from_user_buffer+0x12>
	}
	buffer_counter[uartUser] = 0;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <read_from_user_buffer+0x6c>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <read_from_user_buffer+0x74>)
 8000568:	2100      	movs	r1, #0
 800056a:	5499      	strb	r1, [r3, r2]

	return current_string_length;
 800056c:	78fb      	ldrb	r3, [r7, #3]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000000 	.word	0x20000000
 8000580:	20000048 	.word	0x20000048
 8000584:	20000088 	.word	0x20000088

08000588 <Receive_Data>:
//this could also be done with pointer arithmetic


uint8_t Receive_Data(uint8_t *string_memory, uint8_t current_string_length){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	460b      	mov	r3, r1
 8000592:	70fb      	strb	r3, [r7, #3]
		if(buffer_counter[uartUser] != 0){
 8000594:	4b11      	ldr	r3, [pc, #68]	; (80005dc <Receive_Data+0x54>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <Receive_Data+0x58>)
 800059c:	5c9b      	ldrb	r3, [r3, r2]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d007      	beq.n	80005b2 <Receive_Data+0x2a>
			current_string_length = read_from_user_buffer(string_memory, current_string_length);
 80005a2:	78fb      	ldrb	r3, [r7, #3]
 80005a4:	4619      	mov	r1, r3
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ffb2 	bl	8000510 <read_from_user_buffer>
 80005ac:	4603      	mov	r3, r0
 80005ae:	70fb      	strb	r3, [r7, #3]
 80005b0:	e00f      	b.n	80005d2 <Receive_Data+0x4a>
		}

		else if((buffer_counter[uartUser] == 0) && (buffer_counter[uartKernel] != 0)){
 80005b2:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <Receive_Data+0x54>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	461a      	mov	r2, r3
 80005b8:	4b09      	ldr	r3, [pc, #36]	; (80005e0 <Receive_Data+0x58>)
 80005ba:	5c9b      	ldrb	r3, [r3, r2]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d108      	bne.n	80005d2 <Receive_Data+0x4a>
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <Receive_Data+0x5c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <Receive_Data+0x58>)
 80005c8:	5c9b      	ldrb	r3, [r3, r2]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <Receive_Data+0x4a>
			switch_buffers();
 80005ce:	f7ff ff6b 	bl	80004a8 <switch_buffers>
		}

		return current_string_length;
 80005d2:	78fb      	ldrb	r3, [r7, #3]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000000 	.word	0x20000000
 80005e0:	20000088 	.word	0x20000088
 80005e4:	2000008a 	.word	0x2000008a

080005e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480c      	ldr	r0, [pc, #48]	; (8000624 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f2:	490d      	ldr	r1, [pc, #52]	; (8000628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <LoopForever+0xe>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a0a      	ldr	r2, [pc, #40]	; (8000630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000608:	4c0a      	ldr	r4, [pc, #40]	; (8000634 <LoopForever+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000616:	f000 f811 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fe17 	bl	800024c <main>

0800061e <LoopForever>:

LoopForever:
  b LoopForever
 800061e:	e7fe      	b.n	800061e <LoopForever>
  ldr   r0, =_estack
 8000620:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000628:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 800062c:	080006a4 	.word	0x080006a4
  ldr r2, =_sbss
 8000630:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000634:	2000008c 	.word	0x2000008c

08000638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000638:	e7fe      	b.n	8000638 <ADC1_2_IRQHandler>
	...

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4d0d      	ldr	r5, [pc, #52]	; (8000674 <__libc_init_array+0x38>)
 8000640:	4c0d      	ldr	r4, [pc, #52]	; (8000678 <__libc_init_array+0x3c>)
 8000642:	1b64      	subs	r4, r4, r5
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	2600      	movs	r6, #0
 8000648:	42a6      	cmp	r6, r4
 800064a:	d109      	bne.n	8000660 <__libc_init_array+0x24>
 800064c:	4d0b      	ldr	r5, [pc, #44]	; (800067c <__libc_init_array+0x40>)
 800064e:	4c0c      	ldr	r4, [pc, #48]	; (8000680 <__libc_init_array+0x44>)
 8000650:	f000 f818 	bl	8000684 <_init>
 8000654:	1b64      	subs	r4, r4, r5
 8000656:	10a4      	asrs	r4, r4, #2
 8000658:	2600      	movs	r6, #0
 800065a:	42a6      	cmp	r6, r4
 800065c:	d105      	bne.n	800066a <__libc_init_array+0x2e>
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f855 3b04 	ldr.w	r3, [r5], #4
 8000664:	4798      	blx	r3
 8000666:	3601      	adds	r6, #1
 8000668:	e7ee      	b.n	8000648 <__libc_init_array+0xc>
 800066a:	f855 3b04 	ldr.w	r3, [r5], #4
 800066e:	4798      	blx	r3
 8000670:	3601      	adds	r6, #1
 8000672:	e7f2      	b.n	800065a <__libc_init_array+0x1e>
 8000674:	0800069c 	.word	0x0800069c
 8000678:	0800069c 	.word	0x0800069c
 800067c:	0800069c 	.word	0x0800069c
 8000680:	080006a0 	.word	0x080006a0

08000684 <_init>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr

08000690 <_fini>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr
