
exercise_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000c73  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000387  00000000  00000000  00020cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b8  00000000  00000000  00021078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007b  00000000  00000000  00021130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00014d58  00000000  00000000  000211ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000b3f  00000000  00000000  00035f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000726e5  00000000  00000000  00036a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001e8  00000000  00000000  000a9128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  000a9310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004a4 	.word	0x080004a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004a4 	.word	0x080004a4

080001d4 <EXTI0_IRQHandler>:
// Define a variable to store the LED state
static uint8_t led_state = 0;

// EXTI0 interrupt handler
void EXTI0_IRQHandler(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
    if (button_press_handler != 0x00) {
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <EXTI0_IRQHandler+0x24>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d002      	beq.n	80001e6 <EXTI0_IRQHandler+0x12>
        button_press_handler();
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI0_IRQHandler+0x24>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4798      	blx	r3
    }
    EXTI->PR |= EXTI_PR_PR0;
 80001e6:	4b05      	ldr	r3, [pc, #20]	; (80001fc <EXTI0_IRQHandler+0x28>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a04      	ldr	r2, [pc, #16]	; (80001fc <EXTI0_IRQHandler+0x28>)
 80001ec:	f043 0301 	orr.w	r3, r3, #1
 80001f0:	6153      	str	r3, [r2, #20]
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	20000020 	.word	0x20000020
 80001fc:	40010400 	.word	0x40010400

08000200 <set_button_press_handler>:

// Function to set the button press handler
void set_button_press_handler(void (*handler)(void))
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
    button_press_handler = handler;
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <set_button_press_handler+0x1c>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	6013      	str	r3, [r2, #0]
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	20000020 	.word	0x20000020

08000220 <get_led_state>:

// Function to get the LED state
uint8_t get_led_state(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
    return led_state;
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <get_led_state+0x14>)
 8000226:	781b      	ldrb	r3, [r3, #0]
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000024 	.word	0x20000024

08000238 <set_led_state>:

// Function to set the LED state
void set_led_state(uint8_t state)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
    led_state = state;
 8000242:	4a04      	ldr	r2, [pc, #16]	; (8000254 <set_led_state+0x1c>)
 8000244:	79fb      	ldrb	r3, [r7, #7]
 8000246:	7013      	strb	r3, [r2, #0]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	20000024 	.word	0x20000024

08000258 <chase_led>:



// Function to implement LED chasing effect
void chase_led(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
    static uint8_t led_value = 0x01;  // Holds the current pattern to display on LEDs

    // Set the LED state to the current value
    set_led_state(led_value);
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <chase_led+0x48>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	f7ff ffe8 	bl	8000238 <set_led_state>

    // Calculate the next LED pattern with circular shift
    led_value = (led_value << 1) | (led_value >> 7);
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <chase_led+0x48>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	005b      	lsls	r3, r3, #1
 800026e:	b25a      	sxtb	r2, r3
 8000270:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <chase_led+0x48>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	09db      	lsrs	r3, r3, #7
 8000276:	b2db      	uxtb	r3, r3
 8000278:	b25b      	sxtb	r3, r3
 800027a:	4313      	orrs	r3, r2
 800027c:	b25b      	sxtb	r3, r3
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <chase_led+0x48>)
 8000282:	701a      	strb	r2, [r3, #0]

    // Write the current state of the LEDs to the actual hardware
    // Retrieve the LED state managed through get/set functions
    uint8_t led_register = get_led_state();
 8000284:	f7ff ffcc 	bl	8000220 <get_led_state>
 8000288:	4603      	mov	r3, r0
 800028a:	71fb      	strb	r3, [r7, #7]

    // Get a pointer to the Output Data Register of GPIOE, assuming only PE8-PE15 are used for LEDs
    uint8_t *led_register_ptr = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <chase_led+0x4c>)
 800028e:	603b      	str	r3, [r7, #0]
    *led_register_ptr = led_register;  // Update the output register with the current LED state
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	79fa      	ldrb	r2, [r7, #7]
 8000294:	701a      	strb	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	3708      	adds	r7, #8
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000000 	.word	0x20000000
 80002a4:	48001015 	.word	0x48001015

080002a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	db0b      	blt.n	80002d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f003 021f 	and.w	r2, r3, #31
 80002c0:	4907      	ldr	r1, [pc, #28]	; (80002e0 <__NVIC_EnableIRQ+0x38>)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	095b      	lsrs	r3, r3, #5
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	db0a      	blt.n	800030e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f8:	683b      	ldr	r3, [r7, #0]
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	490c      	ldr	r1, [pc, #48]	; (8000330 <__NVIC_SetPriority+0x4c>)
 80002fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000302:	0112      	lsls	r2, r2, #4
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	440b      	add	r3, r1
 8000308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800030c:	e00a      	b.n	8000324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	b2da      	uxtb	r2, r3
 8000312:	4908      	ldr	r1, [pc, #32]	; (8000334 <__NVIC_SetPriority+0x50>)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	f003 030f 	and.w	r3, r3, #15
 800031a:	3b04      	subs	r3, #4
 800031c:	0112      	lsls	r2, r2, #4
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	440b      	add	r3, r1
 8000322:	761a      	strb	r2, [r3, #24]
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000e100 	.word	0xe000e100
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <button_press_callback>:
void initialise_board(void);
void enable_interrupt(void);

// Callback function to be called when button is pressed
void button_press_callback(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
    // Implement your desired functionality here
    // For example, toggle an LED
    chase_led();
 800033c:	f7ff ff8c 	bl	8000258 <chase_led>
}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}

08000344 <main>:

int main(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
    // Enable clocks for peripherals
    enable_clocks();
 8000348:	f000 f80a 	bl	8000360 <enable_clocks>

    // Initialize GPIO pins for LED and button
    initialise_board();
 800034c:	f000 f818 	bl	8000380 <initialise_board>

    // Set the button press handler to the callback function
    set_button_press_handler(button_press_callback);
 8000350:	4802      	ldr	r0, [pc, #8]	; (800035c <main+0x18>)
 8000352:	f7ff ff55 	bl	8000200 <set_button_press_handler>

    // Enable interrupt for button press
    enable_interrupt();
 8000356:	f000 f825 	bl	80003a4 <enable_interrupt>

    // Infinite loop
    for (;;) {
 800035a:	e7fe      	b.n	800035a <main+0x16>
 800035c:	08000339 	.word	0x08000339

08000360 <enable_clocks>:
        // This loop will continuously execute after setting up the interrupts
    }
}

// Enable clocks for desired peripherals (GPIOA, C and E)
void enable_clocks(void) {
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN;
 8000364:	4b05      	ldr	r3, [pc, #20]	; (800037c <enable_clocks+0x1c>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	4a04      	ldr	r2, [pc, #16]	; (800037c <enable_clocks+0x1c>)
 800036a:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 800036e:	6153      	str	r3, [r2, #20]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <initialise_board>:

// Initialise the discovery board I/O (just outputs: inputs are selected by default)
void initialise_board(void) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
    // Get a pointer to the second half word of the MODER register (for outputs pe8-15)
    uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <initialise_board+0x20>)
 8000388:	607b      	str	r3, [r7, #4]
    *led_output_registers = 0x5555;
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	f245 5255 	movw	r2, #21845	; 0x5555
 8000390:	801a      	strh	r2, [r3, #0]
}
 8000392:	bf00      	nop
 8000394:	370c      	adds	r7, #12
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	48001002 	.word	0x48001002

080003a4 <enable_interrupt>:

// Enable interrupt for button press
void enable_interrupt(void) {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
    // Disable the interrupts while messing around with the settings
    // otherwise, can lead to strange behavior
    __disable_irq();

    // Enable the system configuration controller (SYSCFG in RCC)
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <enable_interrupt+0x58>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a12      	ldr	r2, [pc, #72]	; (80003fc <enable_interrupt+0x58>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6193      	str	r3, [r2, #24]

    // Configure PA0 as EXTI0 interrupt source
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0_Msk; // Clear bits
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <enable_interrupt+0x5c>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a10      	ldr	r2, [pc, #64]	; (8000400 <enable_interrupt+0x5c>)
 80003be:	f023 030f 	bic.w	r3, r3, #15
 80003c2:	6093      	str	r3, [r2, #8]
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;  // Set EXTI0 to PA0
 80003c4:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <enable_interrupt+0x5c>)
 80003c6:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <enable_interrupt+0x5c>)
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	6093      	str	r3, [r2, #8]

    // Configure EXTI0 to trigger on rising edge
    EXTI->RTSR |= EXTI_RTSR_TR0;
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <enable_interrupt+0x60>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a0c      	ldr	r2, [pc, #48]	; (8000404 <enable_interrupt+0x60>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	6093      	str	r3, [r2, #8]

    // Enable EXTI0 interrupt
    EXTI->IMR |= EXTI_IMR_MR0;
 80003d8:	4b0a      	ldr	r3, [pc, #40]	; (8000404 <enable_interrupt+0x60>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <enable_interrupt+0x60>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	6013      	str	r3, [r2, #0]

    // Set EXTI0 interrupt priority and enable it
    NVIC_SetPriority(EXTI0_IRQn, 1);
 80003e4:	2101      	movs	r1, #1
 80003e6:	2006      	movs	r0, #6
 80003e8:	f7ff ff7c 	bl	80002e4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI0_IRQn);
 80003ec:	2006      	movs	r0, #6
 80003ee:	f7ff ff5b 	bl	80002a8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80003f2:	b662      	cpsie	i
}
 80003f4:	bf00      	nop

    // Re-enable all interrupts (now that we are finished)
    __enable_irq();
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000
 8000400:	40010000 	.word	0x40010000
 8000404:	40010400 	.word	0x40010400

08000408 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800040a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800040c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000410:	480c      	ldr	r0, [pc, #48]	; (8000444 <LoopForever+0x6>)
  ldr r1, =_edata
 8000412:	490d      	ldr	r1, [pc, #52]	; (8000448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000414:	4a0d      	ldr	r2, [pc, #52]	; (800044c <LoopForever+0xe>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000418:	e002      	b.n	8000420 <LoopCopyDataInit>

0800041a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800041c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041e:	3304      	adds	r3, #4

08000420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000424:	d3f9      	bcc.n	800041a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000426:	4a0a      	ldr	r2, [pc, #40]	; (8000450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000428:	4c0a      	ldr	r4, [pc, #40]	; (8000454 <LoopForever+0x16>)
  movs r3, #0
 800042a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800042c:	e001      	b.n	8000432 <LoopFillZerobss>

0800042e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000430:	3204      	adds	r2, #4

08000432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000434:	d3fb      	bcc.n	800042e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800043a:	f7ff ff83 	bl	8000344 <main>

0800043e <LoopForever>:

LoopForever:
  b LoopForever
 800043e:	e7fe      	b.n	800043e <LoopForever>
  ldr   r0, =_estack
 8000440:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800044c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000450:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000454:	20000028 	.word	0x20000028

08000458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC1_2_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	; (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	; (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	; (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	; (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
