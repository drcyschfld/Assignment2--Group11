
Integration Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001154  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080012e8  080012e8  000112e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001410  08001410  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08001410  08001410  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001410  08001410  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08001418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          000001b8  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000299f  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000b04  00000000  00000000  00022a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000268  00000000  00000000  00023598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000001b4  00000000  00000000  00023800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00015ef1  00000000  00000000  000239b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000021ac  00000000  00000000  000398a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00076d4b  00000000  00000000  0003ba51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ce4  00000000  00000000  000b279c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000b3480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000007c 	.word	0x2000007c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080012d0 	.word	0x080012d0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000080 	.word	0x20000080
 80001d0:	080012d0 	.word	0x080012d0

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <EXTI0_IRQHandler>:



// EXTI0 interrupt handler
void EXTI0_IRQHandler(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
    if (button_press_handler != 0x00) {
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <EXTI0_IRQHandler+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d002      	beq.n	80001fa <EXTI0_IRQHandler+0x12>
        button_press_handler();
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI0_IRQHandler+0x24>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4798      	blx	r3
    }
    EXTI->PR |= EXTI_PR_PR0;
 80001fa:	4b05      	ldr	r3, [pc, #20]	; (8000210 <EXTI0_IRQHandler+0x28>)
 80001fc:	695b      	ldr	r3, [r3, #20]
 80001fe:	4a04      	ldr	r2, [pc, #16]	; (8000210 <EXTI0_IRQHandler+0x28>)
 8000200:	f043 0301 	orr.w	r3, r3, #1
 8000204:	6153      	str	r3, [r2, #20]
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000098 	.word	0x20000098
 8000210:	40010400 	.word	0x40010400

08000214 <set_led_state>:
	 return LED_pattern;
}

// Function to set the LED state
void set_led_state(uint8_t state)
{
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]
    uint8_t *LED_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 800021e:	4b06      	ldr	r3, [pc, #24]	; (8000238 <set_led_state+0x24>)
 8000220:	60fb      	str	r3, [r7, #12]
    uint8_t LED_pattern = state;
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	72fb      	strb	r3, [r7, #11]
    *LED_output_register = LED_pattern;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	7afa      	ldrb	r2, [r7, #11]
 800022a:	701a      	strb	r2, [r3, #0]
}
 800022c:	bf00      	nop
 800022e:	3714      	adds	r7, #20
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	48001015 	.word	0x48001015

0800023c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	2b00      	cmp	r3, #0
 800024c:	db0b      	blt.n	8000266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	f003 021f 	and.w	r2, r3, #31
 8000254:	4907      	ldr	r1, [pc, #28]	; (8000274 <__NVIC_EnableIRQ+0x38>)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	095b      	lsrs	r3, r3, #5
 800025c:	2001      	movs	r0, #1
 800025e:	fa00 f202 	lsl.w	r2, r0, r2
 8000262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	e000e100 	.word	0xe000e100

08000278 <USART1_EXTI25_IRQHandler>:
#endif



void USART1_EXTI25_IRQHandler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
//	if ((USART1_PORT.UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0)) {
		// set the flags ORECF and FECF to 1
//		USART1_PORT->UART->ICR = serial_port->UART->ICR | (1 << 3 | 1 << 1);
//	}
	//else {
		read_into_kernel();
 800027c:	f000 fa5c 	bl	8000738 <read_into_kernel>
	//}
	//terminating_char_sent = SerialReadChar(incoming_buffer, &USART1_PORT);
	EXTI->PR |= EXTI_PR_PR0;
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <USART1_EXTI25_IRQHandler+0x18>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a02      	ldr	r2, [pc, #8]	; (8000290 <USART1_EXTI25_IRQHandler+0x18>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6153      	str	r3, [r2, #20]
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40010400 	.word	0x40010400

08000294 <TIM2_IRQHandler>:
void (*timer_overflow_2)() = 0x00;
void (*timer_overflow_3)() = 0x00;



void TIM2_IRQHandler(){
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
 * This function is the function that is called when the TIM2 interrupt occurs.
 * The function checks whether the timer_overflow variable is set to another function.
 * If timer_overflow is set, calls the function stored in the variable
 */

	if (timer_overflow_2 != 0x00) {
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <TIM2_IRQHandler+0x1c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d002      	beq.n	80002a6 <TIM2_IRQHandler+0x12>
			timer_overflow_2();
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <TIM2_IRQHandler+0x1c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4798      	blx	r3
		}

	reset_UIF_2();
 80002a6:	f000 fbff 	bl	8000aa8 <reset_UIF_2>

}
 80002aa:	bf00      	nop
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	2000009c 	.word	0x2000009c

080002b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
 * The function checks whether the timer_overflow variable is set to another function.
 * If timer_overflow is set, calls the function stored in the variable
 * it then disables the timer 3 interrupt as this should be a one shot event
 */

	if (timer_overflow_3 != 0x00) {
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <TIM3_IRQHandler+0x20>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d002      	beq.n	80002c6 <TIM3_IRQHandler+0x12>
				timer_overflow_3();
 80002c0:	4b04      	ldr	r3, [pc, #16]	; (80002d4 <TIM3_IRQHandler+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4798      	blx	r3
			}

	reset_UIF_3();
 80002c6:	f000 fcb3 	bl	8000c30 <reset_UIF_3>
	disable_timer_3_interrupt();
 80002ca:	f000 fd2d 	bl	8000d28 <disable_timer_3_interrupt>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200000a0 	.word	0x200000a0

080002d8 <LED_increase>:



void LED_increase(){
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 * this function turns the LEDs on or off one by one.
 * if all the LEDs have turned on, they will start to turn off one by one
 * if all the LEDs are off, they will start to turn on one by one
 */

	uint8_t *LED_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80002de:	4b1a      	ldr	r3, [pc, #104]	; (8000348 <LED_increase+0x70>)
 80002e0:	607b      	str	r3, [r7, #4]

	if (*LED_output_register == 0b11111111){
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2bff      	cmp	r3, #255	; 0xff
 80002e8:	d103      	bne.n	80002f2 <LED_increase+0x1a>

		led_pattern_flag = 0;
 80002ea:	4b18      	ldr	r3, [pc, #96]	; (800034c <LED_increase+0x74>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	701a      	strb	r2, [r3, #0]
 80002f0:	e006      	b.n	8000300 <LED_increase+0x28>

	}

	else if (*LED_output_register == 0b00000000){
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d102      	bne.n	8000300 <LED_increase+0x28>

		led_pattern_flag = 1;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <LED_increase+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	701a      	strb	r2, [r3, #0]

	}

	if (led_pattern_flag == 0){
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <LED_increase+0x74>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d107      	bne.n	800031a <LED_increase+0x42>

		uint8_t LED_right_shift = *LED_output_register >> 1;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	085b      	lsrs	r3, r3, #1
 8000310:	707b      	strb	r3, [r7, #1]
		*LED_output_register = LED_right_shift;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	787a      	ldrb	r2, [r7, #1]
 8000316:	701a      	strb	r2, [r3, #0]
		*LED_output_register = LED_pattern;

	}


}
 8000318:	e00f      	b.n	800033a <LED_increase+0x62>
	else if (led_pattern_flag == 1){
 800031a:	4b0c      	ldr	r3, [pc, #48]	; (800034c <LED_increase+0x74>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b01      	cmp	r3, #1
 8000322:	d10a      	bne.n	800033a <LED_increase+0x62>
		uint8_t LED_left_shift = *LED_output_register << 1;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	70fb      	strb	r3, [r7, #3]
		uint8_t LED_pattern = LED_left_shift | 0x1;
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	70bb      	strb	r3, [r7, #2]
		*LED_output_register = LED_pattern;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	78ba      	ldrb	r2, [r7, #2]
 8000338:	701a      	strb	r2, [r3, #0]
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	48001015 	.word	0x48001015
 800034c:	20000000 	.word	0x20000000

08000350 <main>:




int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0

	//Enable
	general_initialisation();
 8000356:	f000 fbe7 	bl	8000b28 <general_initialisation>

	void (*completion_function)(uint32_t) = &LED_string;
 800035a:	4b46      	ldr	r3, [pc, #280]	; (8000474 <main+0x124>)
 800035c:	617b      	str	r3, [r7, #20]

	//LED_string(4, (string_to_send + 4));

	SerialInitialise(BAUD_115200, &USART1_PORT, completion_function);
 800035e:	697a      	ldr	r2, [r7, #20]
 8000360:	4945      	ldr	r1, [pc, #276]	; (8000478 <main+0x128>)
 8000362:	2004      	movs	r0, #4
 8000364:	f000 f89c 	bl	80004a0 <SerialInitialise>
	initialise_board();
 8000368:	f000 fb3c 	bl	80009e4 <initialise_board>

	NVIC_EnableIRQ(USART1_IRQn);
 800036c:	2025      	movs	r0, #37	; 0x25
 800036e:	f7ff ff65 	bl	800023c <__NVIC_EnableIRQ>

	/* Loop forever */
	for(;;) {

		//Initialise relevant memory
	 	uint8_t *operator = (uint8_t*) malloc(100 * sizeof(uint8_t));
 8000372:	2064      	movs	r0, #100	; 0x64
 8000374:	f000 fd60 	bl	8000e38 <malloc>
 8000378:	4603      	mov	r3, r0
 800037a:	613b      	str	r3, [r7, #16]
		uint8_t operator_length = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	73fb      	strb	r3, [r7, #15]
		uint8_t *operand = (uint8_t*) malloc(100 * sizeof(uint8_t));
 8000380:	2064      	movs	r0, #100	; 0x64
 8000382:	f000 fd59 	bl	8000e38 <malloc>
 8000386:	4603      	mov	r3, r0
 8000388:	60bb      	str	r3, [r7, #8]
		uint8_t operand_length = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	71fb      	strb	r3, [r7, #7]

		Get_Command(operator, operator_length, operand, operand_length);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	7bf9      	ldrb	r1, [r7, #15]
 8000392:	68ba      	ldr	r2, [r7, #8]
 8000394:	6938      	ldr	r0, [r7, #16]
 8000396:	f000 fa4f 	bl	8000838 <Get_Command>
		//operator = (int *)realloc(operator, sizeof(int)*3);

	// to use string compare you need to set the end of the strings to the null terminating character

		if(strcmp("led", operator) == 0){
 800039a:	6939      	ldr	r1, [r7, #16]
 800039c:	4837      	ldr	r0, [pc, #220]	; (800047c <main+0x12c>)
 800039e:	f7ff ff19 	bl	80001d4 <strcmp>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d10b      	bne.n	80003c0 <main+0x70>
			uint8_t LED_value = strtoul(operand, NULL, 2);
 80003a8:	2202      	movs	r2, #2
 80003aa:	2100      	movs	r1, #0
 80003ac:	68b8      	ldr	r0, [r7, #8]
 80003ae:	f000 fefd 	bl	80011ac <strtoul>
 80003b2:	4603      	mov	r3, r0
 80003b4:	707b      	strb	r3, [r7, #1]
			set_led_state(LED_value);
 80003b6:	787b      	ldrb	r3, [r7, #1]
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff2b 	bl	8000214 <set_led_state>
 80003be:	e052      	b.n	8000466 <main+0x116>
		}

		else if(strcmp(operator, "serial") == 0){
 80003c0:	492f      	ldr	r1, [pc, #188]	; (8000480 <main+0x130>)
 80003c2:	6938      	ldr	r0, [r7, #16]
 80003c4:	f7ff ff06 	bl	80001d4 <strcmp>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d104      	bne.n	80003d8 <main+0x88>
			SerialOutputString(operand, &USART1_PORT);
 80003ce:	492a      	ldr	r1, [pc, #168]	; (8000478 <main+0x128>)
 80003d0:	68b8      	ldr	r0, [r7, #8]
 80003d2:	f000 f8fe 	bl	80005d2 <SerialOutputString>
 80003d6:	e046      	b.n	8000466 <main+0x116>
		}

		else if(strcmp(operator, "oneshot") == 0){
 80003d8:	492a      	ldr	r1, [pc, #168]	; (8000484 <main+0x134>)
 80003da:	6938      	ldr	r0, [r7, #16]
 80003dc:	f7ff fefa 	bl	80001d4 <strcmp>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d10d      	bne.n	8000402 <main+0xb2>
			//This is the advanced section of the timer part
			uint16_t milliseconds = atoi(operand);
 80003e6:	68b8      	ldr	r0, [r7, #8]
 80003e8:	f000 fd21 	bl	8000e2e <atoi>
 80003ec:	4603      	mov	r3, r0
 80003ee:	807b      	strh	r3, [r7, #2]

			timer_overflow_3 = one_shot(milliseconds, &LED_all);
 80003f0:	887b      	ldrh	r3, [r7, #2]
 80003f2:	4925      	ldr	r1, [pc, #148]	; (8000488 <main+0x138>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	f000 fcbb 	bl	8000d70 <one_shot>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a23      	ldr	r2, [pc, #140]	; (800048c <main+0x13c>)
 80003fe:	6013      	str	r3, [r2, #0]
 8000400:	e031      	b.n	8000466 <main+0x116>

		}

		else if(strcmp(operator, "timer") == 0){
 8000402:	4923      	ldr	r1, [pc, #140]	; (8000490 <main+0x140>)
 8000404:	6938      	ldr	r0, [r7, #16]
 8000406:	f7ff fee5 	bl	80001d4 <strcmp>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d10d      	bne.n	800042c <main+0xdc>
			//I think this is the second section for the timer

			uint16_t milliseconds = atoi(operand);
 8000410:	68b8      	ldr	r0, [r7, #8]
 8000412:	f000 fd0c 	bl	8000e2e <atoi>
 8000416:	4603      	mov	r3, r0
 8000418:	80bb      	strh	r3, [r7, #4]

			timer_overflow_2 = regular_timer(milliseconds, &LED_increase);
 800041a:	88bb      	ldrh	r3, [r7, #4]
 800041c:	491d      	ldr	r1, [pc, #116]	; (8000494 <main+0x144>)
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fbe4 	bl	8000bec <regular_timer>
 8000424:	4603      	mov	r3, r0
 8000426:	4a1c      	ldr	r2, [pc, #112]	; (8000498 <main+0x148>)
 8000428:	6013      	str	r3, [r2, #0]
 800042a:	e01c      	b.n	8000466 <main+0x116>

		}

		else if(strcmp(operator, "disable") == 0){
 800042c:	491b      	ldr	r1, [pc, #108]	; (800049c <main+0x14c>)
 800042e:	6938      	ldr	r0, [r7, #16]
 8000430:	f7ff fed0 	bl	80001d4 <strcmp>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d113      	bne.n	8000462 <main+0x112>

			if (strcmp(operand, "timer") == 0){
 800043a:	4915      	ldr	r1, [pc, #84]	; (8000490 <main+0x140>)
 800043c:	68b8      	ldr	r0, [r7, #8]
 800043e:	f7ff fec9 	bl	80001d4 <strcmp>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d102      	bne.n	800044e <main+0xfe>

				disable_timer_2_interrupt();
 8000448:	f000 fbad 	bl	8000ba6 <disable_timer_2_interrupt>
 800044c:	e00b      	b.n	8000466 <main+0x116>

			}

			else if (strcmp(operand, "led") == 0){
 800044e:	490b      	ldr	r1, [pc, #44]	; (800047c <main+0x12c>)
 8000450:	68b8      	ldr	r0, [r7, #8]
 8000452:	f7ff febf 	bl	80001d4 <strcmp>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d104      	bne.n	8000466 <main+0x116>

				LED_off();
 800045c:	f000 fcac 	bl	8000db8 <LED_off>
 8000460:	e001      	b.n	8000466 <main+0x116>
			}
		}

		else{
			//Have the LEDs flashing
			uint8_t banana = 'get int';
 8000462:	2374      	movs	r3, #116	; 0x74
 8000464:	71bb      	strb	r3, [r7, #6]
		}

		free(operator);
 8000466:	6938      	ldr	r0, [r7, #16]
 8000468:	f000 fcee 	bl	8000e48 <free>
		free(operand);
 800046c:	68b8      	ldr	r0, [r7, #8]
 800046e:	f000 fceb 	bl	8000e48 <free>
	for(;;) {
 8000472:	e77e      	b.n	8000372 <main+0x22>
 8000474:	080006b1 	.word	0x080006b1
 8000478:	20000004 	.word	0x20000004
 800047c:	080012e8 	.word	0x080012e8
 8000480:	080012ec 	.word	0x080012ec
 8000484:	080012f4 	.word	0x080012f4
 8000488:	08000d95 	.word	0x08000d95
 800048c:	200000a0 	.word	0x200000a0
 8000490:	080012fc 	.word	0x080012fc
 8000494:	080002d9 	.word	0x080002d9
 8000498:	2000009c 	.word	0x2000009c
 800049c:	08001304 	.word	0x08001304

080004a0 <SerialInitialise>:
		};


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set
void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80004a0:	b480      	push	{r7}
 80004a2:	b087      	sub	sp, #28
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	625a      	str	r2, [r3, #36]	; 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004b2:	4b3a      	ldr	r3, [pc, #232]	; (800059c <SerialInitialise+0xfc>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a39      	ldr	r2, [pc, #228]	; (800059c <SerialInitialise+0xfc>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004bc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80004be:	4b37      	ldr	r3, [pc, #220]	; (800059c <SerialInitialise+0xfc>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a36      	ldr	r2, [pc, #216]	; (800059c <SerialInitialise+0xfc>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	691a      	ldr	r2, [r3, #16]
 80004ce:	4b33      	ldr	r3, [pc, #204]	; (800059c <SerialInitialise+0xfc>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4932      	ldr	r1, [pc, #200]	; (800059c <SerialInitialise+0xfc>)
 80004d4:	4313      	orrs	r3, r2
 80004d6:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	68ba      	ldr	r2, [r7, #8]
 80004de:	6952      	ldr	r2, [r2, #20]
 80004e0:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	6992      	ldr	r2, [r2, #24]
 80004ea:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	69d9      	ldr	r1, [r3, #28]
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	6a1a      	ldr	r2, [r3, #32]
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	430a      	orrs	r2, r1
 80004fc:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	6a19      	ldr	r1, [r3, #32]
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	430a      	orrs	r2, r1
 800050e:	625a      	str	r2, [r3, #36]	; 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	4b21      	ldr	r3, [pc, #132]	; (800059c <SerialInitialise+0xfc>)
 8000516:	69db      	ldr	r3, [r3, #28]
 8000518:	4920      	ldr	r1, [pc, #128]	; (800059c <SerialInitialise+0xfc>)
 800051a:	4313      	orrs	r3, r2
 800051c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	689a      	ldr	r2, [r3, #8]
 8000522:	4b1e      	ldr	r3, [pc, #120]	; (800059c <SerialInitialise+0xfc>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	491d      	ldr	r1, [pc, #116]	; (800059c <SerialInitialise+0xfc>)
 8000528:	4313      	orrs	r3, r2
 800052a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	330c      	adds	r3, #12
 8000532:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	2b04      	cmp	r3, #4
 8000538:	d822      	bhi.n	8000580 <SerialInitialise+0xe0>
 800053a:	a201      	add	r2, pc, #4	; (adr r2, 8000540 <SerialInitialise+0xa0>)
 800053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000540:	08000555 	.word	0x08000555
 8000544:	0800055f 	.word	0x0800055f
 8000548:	08000569 	.word	0x08000569
 800054c:	08000571 	.word	0x08000571
 8000550:	08000579 	.word	0x08000579
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x342;  // 115200 at 8MHz
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	f240 3242 	movw	r2, #834	; 0x342
 800055a:	801a      	strh	r2, [r3, #0]
		break;
 800055c:	e010      	b.n	8000580 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x1a1;  // 115200 at 8MHz
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000564:	801a      	strh	r2, [r3, #0]
		break;
 8000566:	e00b      	b.n	8000580 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0xd1;  // 115200 at 8MHz
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	22d1      	movs	r2, #209	; 0xd1
 800056c:	801a      	strh	r2, [r3, #0]
		break;
 800056e:	e007      	b.n	8000580 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x8b;  // 115200 at 8MHz
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	228b      	movs	r2, #139	; 0x8b
 8000574:	801a      	strh	r2, [r3, #0]
		break;
 8000576:	e003      	b.n	8000580 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	2246      	movs	r2, #70	; 0x46
 800057c:	801a      	strh	r2, [r3, #0]
		break;
 800057e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f042 022d 	orr.w	r2, r2, #45	; 0x2d
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	371c      	adds	r7, #28
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40021000 	.word	0x40021000

080005a0 <SerialOutputChar>:


void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80005ac:	bf00      	nop
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0f8      	beq.n	80005ae <SerialOutputChar+0xe>
	} //This checks whether a flag has been waiting


	serial_port->UART->TDR = data;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	79fa      	ldrb	r2, [r7, #7]
 80005c2:	b292      	uxth	r2, r2
 80005c4:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr

080005d2 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]
 80005da:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80005e0:	e00b      	b.n	80005fa <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	6839      	ldr	r1, [r7, #0]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ffd9 	bl	80005a0 <SerialOutputChar>
		counter++;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
		pt++;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3301      	adds	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1ef      	bne.n	80005e2 <SerialOutputString+0x10>
	}

	//serial_port->completion_function(counter);
}
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <SerialReadChar>:


uint8_t SerialReadChar(uint8_t *incoming_buffer, SerialPort *serial_port) {
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]

	if (((serial_port->UART->ISR & (USART_ISR_ORE | USART_ISR_FE)) != 0)) {
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	69db      	ldr	r3, [r3, #28]
 800061c:	f003 030a 	and.w	r3, r3, #10
 8000620:	2b00      	cmp	r3, #0
 8000622:	d008      	beq.n	8000636 <SerialReadChar+0x2a>
		// set the flags ORECF and FECF to 1
		serial_port->UART->ICR = serial_port->UART->ICR | (1 << 3 | 1 << 1);
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6a1a      	ldr	r2, [r3, #32]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f042 020a 	orr.w	r2, r2, #10
 8000632:	621a      	str	r2, [r3, #32]
 8000634:	e032      	b.n	800069c <SerialReadChar+0x90>
	}

	else{
		incoming_buffer[buffer_counter[uartKernel]] = serial_port->UART->RDR;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <SerialReadChar+0x9c>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4619      	mov	r1, r3
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <SerialReadChar+0xa0>)
 8000646:	5c5b      	ldrb	r3, [r3, r1]
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	440b      	add	r3, r1
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	701a      	strb	r2, [r3, #0]

		serial_port->UART->RQR |= (1 << 3);
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	699a      	ldr	r2, [r3, #24]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f042 0208 	orr.w	r2, r2, #8
 8000660:	619a      	str	r2, [r3, #24]

		if (incoming_buffer[buffer_counter[uartKernel]] == '+'){
 8000662:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <SerialReadChar+0x9c>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	461a      	mov	r2, r3
 8000668:	4b10      	ldr	r3, [pc, #64]	; (80006ac <SerialReadChar+0xa0>)
 800066a:	5c9b      	ldrb	r3, [r3, r2]
 800066c:	461a      	mov	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b2b      	cmp	r3, #43	; 0x2b
 8000676:	d109      	bne.n	800068c <SerialReadChar+0x80>
			buffer_counter[uartKernel]++;
 8000678:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <SerialReadChar+0x9c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <SerialReadChar+0xa0>)
 800067e:	5cd2      	ldrb	r2, [r2, r3]
 8000680:	3201      	adds	r2, #1
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	4a09      	ldr	r2, [pc, #36]	; (80006ac <SerialReadChar+0xa0>)
 8000686:	54d1      	strb	r1, [r2, r3]
			return 1;
 8000688:	2301      	movs	r3, #1
 800068a:	e007      	b.n	800069c <SerialReadChar+0x90>
		}
		buffer_counter[uartKernel]++;
 800068c:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <SerialReadChar+0x9c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <SerialReadChar+0xa0>)
 8000692:	5cd2      	ldrb	r2, [r2, r3]
 8000694:	3201      	adds	r2, #1
 8000696:	b2d1      	uxtb	r1, r2
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <SerialReadChar+0xa0>)
 800069a:	54d1      	strb	r1, [r2, r3]
	}

}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	200000e6 	.word	0x200000e6
 80006ac:	200000e4 	.word	0x200000e4

080006b0 <LED_string>:
		incoming_buffer++;
	}
	serial_port->completion_function((incoming_buffer - (counter-1)), counter);
}

void LED_string(uint8_t *string, uint32_t counter) {
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	uint16_t *led_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <LED_string+0x44>)
 80006bc:	60bb      	str	r3, [r7, #8]

	for(int i = 0; (i-1) < counter; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	e009      	b.n	80006d8 <LED_string+0x28>
		//string = string + i;
		*led_register = string[i]; //I am unable to write into the led_register
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	801a      	strh	r2, [r3, #0]
	for(int i = 0; (i-1) < counter; i++) {
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	3301      	adds	r3, #1
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3b01      	subs	r3, #1
 80006dc:	461a      	mov	r2, r3
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d8ef      	bhi.n	80006c4 <LED_string+0x14>
//		delay_function(); //Insert the delay function from Kyan

	}
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3714      	adds	r7, #20
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	48001015 	.word	0x48001015

080006f8 <switch_buffers>:

	// Re-enable all interrupts (now that we are finished)
	__enable_irq();
}

void switch_buffers() {
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
	uartUser = (!uartUser) & 0x01;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <switch_buffers+0x38>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	bf0c      	ite	eq
 8000704:	2301      	moveq	r3, #1
 8000706:	2300      	movne	r3, #0
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <switch_buffers+0x38>)
 800070e:	701a      	strb	r2, [r3, #0]
	uartKernel = (!uartKernel) & 0x01;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <switch_buffers+0x3c>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	bf0c      	ite	eq
 8000718:	2301      	moveq	r3, #1
 800071a:	2300      	movne	r3, #0
 800071c:	b2db      	uxtb	r3, r3
 800071e:	461a      	mov	r2, r3
 8000720:	4b04      	ldr	r3, [pc, #16]	; (8000734 <switch_buffers+0x3c>)
 8000722:	701a      	strb	r2, [r3, #0]

	//buffer_counter[uartKernel] = 0;
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	20000001 	.word	0x20000001
 8000734:	200000e6 	.word	0x200000e6

08000738 <read_into_kernel>:

void read_into_kernel(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	SerialReadChar(double_buffer[uartKernel], &USART1_PORT);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <read_into_kernel+0x1c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	015b      	lsls	r3, r3, #5
 8000742:	4a05      	ldr	r2, [pc, #20]	; (8000758 <read_into_kernel+0x20>)
 8000744:	4413      	add	r3, r2
 8000746:	4905      	ldr	r1, [pc, #20]	; (800075c <read_into_kernel+0x24>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff5f 	bl	800060c <SerialReadChar>
	//buffer_counter[uartKernel]++;

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000e6 	.word	0x200000e6
 8000758:	200000a4 	.word	0x200000a4
 800075c:	20000004 	.word	0x20000004

08000760 <read_from_user_buffer>:

uint8_t read_from_user_buffer(uint8_t *string_memory, uint8_t current_string_length){
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; i < buffer_counter[uartUser]; i++){
 800076c:	2300      	movs	r3, #0
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	e015      	b.n	800079e <read_from_user_buffer+0x3e>
		string_memory[current_string_length + i] = double_buffer[uartUser][i];
 8000772:	4b16      	ldr	r3, [pc, #88]	; (80007cc <read_from_user_buffer+0x6c>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4618      	mov	r0, r3
 8000778:	78fa      	ldrb	r2, [r7, #3]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4413      	add	r3, r2
 8000784:	4912      	ldr	r1, [pc, #72]	; (80007d0 <read_from_user_buffer+0x70>)
 8000786:	0142      	lsls	r2, r0, #5
 8000788:	4411      	add	r1, r2
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	440a      	add	r2, r1
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	701a      	strb	r2, [r3, #0]
		current_string_length++;
 8000792:	78fb      	ldrb	r3, [r7, #3]
 8000794:	3301      	adds	r3, #1
 8000796:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < buffer_counter[uartUser]; i++){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	3301      	adds	r3, #1
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <read_from_user_buffer+0x6c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	461a      	mov	r2, r3
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <read_from_user_buffer+0x74>)
 80007a6:	5c9b      	ldrb	r3, [r3, r2]
 80007a8:	461a      	mov	r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4293      	cmp	r3, r2
 80007ae:	dbe0      	blt.n	8000772 <read_from_user_buffer+0x12>
	}
	buffer_counter[uartUser] = 0;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <read_from_user_buffer+0x6c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <read_from_user_buffer+0x74>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	5499      	strb	r1, [r3, r2]

	return current_string_length;
 80007bc:	78fb      	ldrb	r3, [r7, #3]
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000001 	.word	0x20000001
 80007d0:	200000a4 	.word	0x200000a4
 80007d4:	200000e4 	.word	0x200000e4

080007d8 <Receive_Data>:
//this could also be done with pointer arithmetic


uint8_t Receive_Data(uint8_t *string_memory, uint8_t current_string_length){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
		if(buffer_counter[uartUser] != 0){
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <Receive_Data+0x54>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <Receive_Data+0x58>)
 80007ec:	5c9b      	ldrb	r3, [r3, r2]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d007      	beq.n	8000802 <Receive_Data+0x2a>
			current_string_length = read_from_user_buffer(string_memory, current_string_length);
 80007f2:	78fb      	ldrb	r3, [r7, #3]
 80007f4:	4619      	mov	r1, r3
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ffb2 	bl	8000760 <read_from_user_buffer>
 80007fc:	4603      	mov	r3, r0
 80007fe:	70fb      	strb	r3, [r7, #3]
 8000800:	e00f      	b.n	8000822 <Receive_Data+0x4a>
		}

		else if((buffer_counter[uartUser] == 0) && (buffer_counter[uartKernel] != 0)){
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <Receive_Data+0x54>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <Receive_Data+0x58>)
 800080a:	5c9b      	ldrb	r3, [r3, r2]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d108      	bne.n	8000822 <Receive_Data+0x4a>
 8000810:	4b08      	ldr	r3, [pc, #32]	; (8000834 <Receive_Data+0x5c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <Receive_Data+0x58>)
 8000818:	5c9b      	ldrb	r3, [r3, r2]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <Receive_Data+0x4a>
			switch_buffers();
 800081e:	f7ff ff6b 	bl	80006f8 <switch_buffers>
		}

		return current_string_length;
 8000822:	78fb      	ldrb	r3, [r7, #3]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000001 	.word	0x20000001
 8000830:	200000e4 	.word	0x200000e4
 8000834:	200000e6 	.word	0x200000e6

08000838 <Get_Command>:


void Get_Command(uint8_t *operator_string, uint8_t operator_string_length, uint8_t *operand_string, uint8_t operand_string_length){
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	607a      	str	r2, [r7, #4]
 8000842:	461a      	mov	r2, r3
 8000844:	460b      	mov	r3, r1
 8000846:	72fb      	strb	r3, [r7, #11]
 8000848:	4613      	mov	r3, r2
 800084a:	72bb      	strb	r3, [r7, #10]
	//this could also be a global variable
	uint8_t first_spacebar_flag = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
	uint8_t terminating_character_flag = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	75bb      	strb	r3, [r7, #22]

//the issue is how to get the flags to be raised

		while (first_spacebar_flag == 0){
 8000854:	e015      	b.n	8000882 <Get_Command+0x4a>
			operator_string_length = Receive_Data(operator_string, operator_string_length);
 8000856:	7afb      	ldrb	r3, [r7, #11]
 8000858:	4619      	mov	r1, r3
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f7ff ffbc 	bl	80007d8 <Receive_Data>
 8000860:	4603      	mov	r3, r0
 8000862:	72fb      	strb	r3, [r7, #11]

			if(operator_string[operator_string_length - 1] == ' '){
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	3b01      	subs	r3, #1
 8000868:	68fa      	ldr	r2, [r7, #12]
 800086a:	4413      	add	r3, r2
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b20      	cmp	r3, #32
 8000870:	d107      	bne.n	8000882 <Get_Command+0x4a>
				operator_string[operator_string_length - 1] = '\0';
 8000872:	7afb      	ldrb	r3, [r7, #11]
 8000874:	3b01      	subs	r3, #1
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4413      	add	r3, r2
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
				first_spacebar_flag = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	75fb      	strb	r3, [r7, #23]
		while (first_spacebar_flag == 0){
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d0e6      	beq.n	8000856 <Get_Command+0x1e>
			}
		}

		while(terminating_character_flag == 0){
 8000888:	e015      	b.n	80008b6 <Get_Command+0x7e>
			operand_string_length = Receive_Data(operand_string, operand_string_length);
 800088a:	7abb      	ldrb	r3, [r7, #10]
 800088c:	4619      	mov	r1, r3
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffa2 	bl	80007d8 <Receive_Data>
 8000894:	4603      	mov	r3, r0
 8000896:	72bb      	strb	r3, [r7, #10]

			if(operand_string[operand_string_length-1] == '+'){
 8000898:	7abb      	ldrb	r3, [r7, #10]
 800089a:	3b01      	subs	r3, #1
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4413      	add	r3, r2
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b2b      	cmp	r3, #43	; 0x2b
 80008a4:	d107      	bne.n	80008b6 <Get_Command+0x7e>
				operand_string[operand_string_length-1] = '\0';
 80008a6:	7abb      	ldrb	r3, [r7, #10]
 80008a8:	3b01      	subs	r3, #1
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	4413      	add	r3, r2
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
				terminating_character_flag = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	75bb      	strb	r3, [r7, #22]
		while(terminating_character_flag == 0){
 80008b6:	7dbb      	ldrb	r3, [r7, #22]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0e6      	beq.n	800088a <Get_Command+0x52>
			}
		}


}
 80008bc:	bf00      	nop
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d0:	4a14      	ldr	r2, [pc, #80]	; (8000924 <_sbrk+0x5c>)
 80008d2:	4b15      	ldr	r3, [pc, #84]	; (8000928 <_sbrk+0x60>)
 80008d4:	1ad3      	subs	r3, r2, r3
 80008d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <_sbrk+0x64>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d102      	bne.n	80008ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x64>)
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_sbrk+0x68>)
 80008e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <_sbrk+0x64>)
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4413      	add	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d207      	bcs.n	8000908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008f8:	f000 fc72 	bl	80011e0 <__errno>
 80008fc:	4603      	mov	r3, r0
 80008fe:	220c      	movs	r2, #12
 8000900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000906:	e009      	b.n	800091c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <_sbrk+0x64>)
 8000918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3718      	adds	r7, #24
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	2000a000 	.word	0x2000a000
 8000928:	00000400 	.word	0x00000400
 800092c:	200000e8 	.word	0x200000e8
 8000930:	20000238 	.word	0x20000238

08000934 <__NVIC_EnableIRQ>:
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	2b00      	cmp	r3, #0
 8000944:	db0b      	blt.n	800095e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	f003 021f 	and.w	r2, r3, #31
 800094c:	4907      	ldr	r1, [pc, #28]	; (800096c <__NVIC_EnableIRQ+0x38>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	095b      	lsrs	r3, r3, #5
 8000954:	2001      	movs	r0, #1
 8000956:	fa00 f202 	lsl.w	r2, r0, r2
 800095a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	e000e100 	.word	0xe000e100

08000970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	6039      	str	r1, [r7, #0]
 800097a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	2b00      	cmp	r3, #0
 8000982:	db0a      	blt.n	800099a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	b2da      	uxtb	r2, r3
 8000988:	490c      	ldr	r1, [pc, #48]	; (80009bc <__NVIC_SetPriority+0x4c>)
 800098a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098e:	0112      	lsls	r2, r2, #4
 8000990:	b2d2      	uxtb	r2, r2
 8000992:	440b      	add	r3, r1
 8000994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000998:	e00a      	b.n	80009b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	4908      	ldr	r1, [pc, #32]	; (80009c0 <__NVIC_SetPriority+0x50>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	3b04      	subs	r3, #4
 80009a8:	0112      	lsls	r2, r2, #4
 80009aa:	b2d2      	uxtb	r2, r2
 80009ac:	440b      	add	r3, r1
 80009ae:	761a      	strb	r2, [r3, #24]
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <enable_clocks>:
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



int enable_clocks(){
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function enables all necessary GPIO clocks
 */

	RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOCEN | RCC_AHBENR_GPIOEEN; //enable GPIOA, GPIOC, GPIOE
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <enable_clocks+0x1c>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <enable_clocks+0x1c>)
 80009ce:	f443 1328 	orr.w	r3, r3, #2752512	; 0x2a0000
 80009d2:	6153      	str	r3, [r2, #20]



}
 80009d4:	bf00      	nop
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <initialise_board>:

void initialise_board() {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function sets the LED ports to output
 */
	// get a pointer to the second half word of the MODER register (for outputs pe8-15)
	uint16_t *led_output_registers = ((uint16_t *)&(GPIOE->MODER)) + 1;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <initialise_board+0x20>)
 80009ec:	607b      	str	r3, [r7, #4]
	*led_output_registers = 0x5555;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	f245 5255 	movw	r2, #21845	; 0x5555
 80009f4:	801a      	strh	r2, [r3, #0]
}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	48001002 	.word	0x48001002

08000a08 <set_max_count>:

void set_max_count(timer_info *s, uint16_t max_count_value){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
/*
 * function info:
 * this function takes in a variable of type timer_info and a value and sets the variable.max_count to the value
 */

	s->max_count = max_count_value;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	887a      	ldrh	r2, [r7, #2]
 8000a18:	801a      	strh	r2, [r3, #0]

}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr

08000a26 <set_psc_value>:

void set_psc_value(timer_info *s, uint16_t psc_int){
 8000a26:	b480      	push	{r7}
 8000a28:	b083      	sub	sp, #12
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	807b      	strh	r3, [r7, #2]
/*
 * function info:
 * this function takes in a variable of type timer_info and a value and sets the variable.psc_value to the value
 */

	s->psc_value = psc_int;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	887a      	ldrh	r2, [r7, #2]
 8000a36:	805a      	strh	r2, [r3, #2]

}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <delay_set>:

timer_info delay_set(uint16_t delay_in_milliseconds){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
 * 0x3E8 = count of 1000 (1 second)
 */

	timer_info timer_x_info;
	//uint16_t max_count_value = 0x3E8;
	uint16_t psc_value = 0x1F3F;
 8000a4e:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8000a52:	82fb      	strh	r3, [r7, #22]
	set_max_count(&timer_x_info, delay_in_milliseconds);
 8000a54:	88fa      	ldrh	r2, [r7, #6]
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ffd3 	bl	8000a08 <set_max_count>
	set_psc_value(&timer_x_info, psc_value);
 8000a62:	8afa      	ldrh	r2, [r7, #22]
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ffdb 	bl	8000a26 <set_psc_value>

	return timer_x_info;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	2300      	movs	r3, #0
 8000a76:	8a3a      	ldrh	r2, [r7, #16]
 8000a78:	f362 030f 	bfi	r3, r2, #0, #16
 8000a7c:	8a7a      	ldrh	r2, [r7, #18]
 8000a7e:	f362 431f 	bfi	r3, r2, #16, #16
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <reset_timer_2>:




void reset_timer_2() {
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function forces the counter to overflow
 */
	TIM2->EGR |= TIM_EGR_UG;
 8000a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6153      	str	r3, [r2, #20]

}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <reset_UIF_2>:

void reset_UIF_2(){
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function resets the UIF bit in timer 2 SR register
 */

	TIM2->SR &= ~TIM_SR_UIF;
 8000aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab6:	f023 0301 	bic.w	r3, r3, #1
 8000aba:	6113      	str	r3, [r2, #16]

}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <max_count_value_timer_2>:

void max_count_value_timer_2(timer_info *s) {
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 * function info:
 * this function takes in a struct that gives information about the timers properties and sets timer 2 max count to the
 * specified count
 */

	uint16_t max_count = s->max_count;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	81fb      	strh	r3, [r7, #14]
	TIM2->ARR = max_count;
 8000ad4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ad8:	89fb      	ldrh	r3, [r7, #14]
 8000ada:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <start_timer_2>:

void start_timer_2() {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function sets timer 2 enable bit to 1 to start the counter
 */

	TIM2->CR1 |= TIM_CR1_CEN;
 8000aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]

}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <set_prescaler_timer_2>:

void set_prescaler_timer_2(timer_info *s){
 8000b06:	b480      	push	{r7}
 8000b08:	b085      	sub	sp, #20
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 * function info:
 * this function takes in a struct that gives information about the timers properties and sets timer 2 psc to the
 * specified value
 */

	uint16_t psc_value = s->psc_value;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	885b      	ldrh	r3, [r3, #2]
 8000b12:	81fb      	strh	r3, [r7, #14]
	TIM2->PSC = psc_value;
 8000b14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b18:	89fb      	ldrh	r3, [r7, #14]
 8000b1a:	6293      	str	r3, [r2, #40]	; 0x28

}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <general_initialisation>:

void general_initialisation() {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function encapsulates the general setup of the STM32 board to allow for things to be done
 */
	enable_clocks();
 8000b2c:	f7ff ff4a 	bl	80009c4 <enable_clocks>
	initialise_board();
 8000b30:	f7ff ff58 	bl	80009e4 <initialise_board>

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <timer_2_initialisation>:

void timer_2_initialisation(timer_info *s){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
 * function info:
 * this function initialises timer 2 to have a delay specified by the struct that is passed into it
 */
	__disable_irq();

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //store a 1 into the TIM2 enable flag to enable the timer
 8000b44:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <timer_2_initialisation+0x3c>)
 8000b46:	69db      	ldr	r3, [r3, #28]
 8000b48:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <timer_2_initialisation+0x3c>)
 8000b4a:	f043 0301 	orr.w	r3, r3, #1
 8000b4e:	61d3      	str	r3, [r2, #28]

	max_count_value_timer_2(s);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ffb8 	bl	8000ac6 <max_count_value_timer_2>
	start_timer_2();
 8000b56:	f7ff ffc7 	bl	8000ae8 <start_timer_2>
	set_prescaler_timer_2(s);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ffd3 	bl	8000b06 <set_prescaler_timer_2>
	reset_timer_2();
 8000b60:	f7ff ff93 	bl	8000a8a <reset_timer_2>
	reset_UIF_2();
 8000b64:	f7ff ffa0 	bl	8000aa8 <reset_UIF_2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000b68:	b662      	cpsie	i
}
 8000b6a:	bf00      	nop

	__enable_irq();

}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000

08000b78 <enable_interrupt_timer_2>:

void enable_interrupt_timer_2(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
 * this function enables interrupts for timer 2
 */
	__disable_irq();


	__NVIC_SetPriority(TIM2_IRQn,2);
 8000b80:	2102      	movs	r1, #2
 8000b82:	201c      	movs	r0, #28
 8000b84:	f7ff fef4 	bl	8000970 <__NVIC_SetPriority>
	__NVIC_EnableIRQ(TIM2_IRQn);
 8000b88:	201c      	movs	r0, #28
 8000b8a:	f7ff fed3 	bl	8000934 <__NVIC_EnableIRQ>

	TIM2->DIER |= TIM_DIER_UIE;
 8000b8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b9e:	b662      	cpsie	i
}
 8000ba0:	bf00      	nop

	__enable_irq();
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <disable_timer_2_interrupt>:

void disable_timer_2_interrupt(){
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function disables interrupts for timer 2
 */

	TIM2->DIER &= ~TIM_DIER_UIE;
 8000baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	60d3      	str	r3, [r2, #12]

}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <timer_2_set>:

void timer_2_set(uint16_t delay_in_milliseconds){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
 * this function takes in a delay in milliseconds and passes it to the delay_set function.
 * The return of the delay_set function is saved in the variable timer_x_info which is then
 * passed to the timer_initialisation function to start the delay
 */

	timer_info timer_x_info = delay_set(delay_in_milliseconds);
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff37 	bl	8000a44 <delay_set>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	60fb      	str	r3, [r7, #12]

	timer_2_initialisation(&timer_x_info);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ffaa 	bl	8000b38 <timer_2_initialisation>
}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <regular_timer>:

void (*regular_timer(uint16_t delay_in_milliseconds, void (*func_ptr)()))() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	80fb      	strh	r3, [r7, #6]
/*
 * function info:
 * this function makes it so that any function can be passed in as a function pointer and when an interrupt occurs
 * the desired function is called
 */
    timer_2_set(delay_in_milliseconds);
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ffe2 	bl	8000bc4 <timer_2_set>
    enable_interrupt_timer_2();
 8000c00:	f7ff ffba 	bl	8000b78 <enable_interrupt_timer_2>

    return func_ptr;
 8000c04:	683b      	ldr	r3, [r7, #0]

}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <reset_timer_3>:




void reset_timer_3() {
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function forces the counter to overflow
 */

	TIM3->EGR |= TIM_EGR_UG;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <reset_timer_3+0x1c>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <reset_timer_3+0x1c>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6153      	str	r3, [r2, #20]

}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40000400 	.word	0x40000400

08000c30 <reset_UIF_3>:

void reset_UIF_3(){
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function resets the UIF bit in timer 2 SR register
 */

	TIM3->SR &= ~TIM_SR_UIF;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <reset_UIF_3+0x1c>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <reset_UIF_3+0x1c>)
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	6113      	str	r3, [r2, #16]

}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40000400 	.word	0x40000400

08000c50 <max_count_value_timer_3>:

void max_count_value_timer_3(timer_info *s) {
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
/*
 * function info:
 * this function takes in a struct that gives information about the timers properties and sets timer 3 max count to the
 * specified count
 */
	uint16_t max_count = s->max_count;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	81fb      	strh	r3, [r7, #14]
	TIM3->ARR = max_count;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <max_count_value_timer_3+0x20>)
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	62d3      	str	r3, [r2, #44]	; 0x2c

}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	40000400 	.word	0x40000400

08000c74 <start_timer_3>:

void start_timer_3() {
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function sets timer 3 enable bit to 1 to start the counter
 */

	TIM3->CR1 |= TIM_CR1_CEN;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <start_timer_3+0x1c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	; (8000c90 <start_timer_3+0x1c>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6013      	str	r3, [r2, #0]

}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40000400 	.word	0x40000400

08000c94 <set_prescaler_timer_3>:

void set_prescaler_timer_3(timer_info *s){
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
/*
 * function info:
 * this function takes in a struct that gives information about the timers properties and sets timer 3 psc to the
 * specified value
 */
	uint16_t psc_value = s->psc_value;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	885b      	ldrh	r3, [r3, #2]
 8000ca0:	81fb      	strh	r3, [r7, #14]
	TIM3->PSC = psc_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <set_prescaler_timer_3+0x20>)
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	6293      	str	r3, [r2, #40]	; 0x28

}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	40000400 	.word	0x40000400

08000cb8 <timer_3_initialisation>:

void timer_3_initialisation(timer_info *s){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
 * this function initialises timer 3 to have a delay specified by the struct that is passed into it
 */

	__disable_irq();

	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <timer_3_initialisation+0x3c>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <timer_3_initialisation+0x3c>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	61d3      	str	r3, [r2, #28]

	max_count_value_timer_3(s);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ffbd 	bl	8000c50 <max_count_value_timer_3>
	start_timer_3();
 8000cd6:	f7ff ffcd 	bl	8000c74 <start_timer_3>
	set_prescaler_timer_3(s);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f7ff ffda 	bl	8000c94 <set_prescaler_timer_3>
	reset_timer_3();
 8000ce0:	f7ff ff96 	bl	8000c10 <reset_timer_3>
	reset_UIF_3();
 8000ce4:	f7ff ffa4 	bl	8000c30 <reset_UIF_3>
  __ASM volatile ("cpsie i" : : : "memory");
 8000ce8:	b662      	cpsie	i
}
 8000cea:	bf00      	nop

	__enable_irq();

}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <enable_interrupt_timer_3>:

void enable_interrupt_timer_3(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cfc:	b672      	cpsid	i
}
 8000cfe:	bf00      	nop
 * this function enables interrupts for timer 3
 */

	__disable_irq();

	__NVIC_SetPriority(TIM3_IRQn,2);
 8000d00:	2102      	movs	r1, #2
 8000d02:	201d      	movs	r0, #29
 8000d04:	f7ff fe34 	bl	8000970 <__NVIC_SetPriority>
	__NVIC_EnableIRQ(TIM3_IRQn);
 8000d08:	201d      	movs	r0, #29
 8000d0a:	f7ff fe13 	bl	8000934 <__NVIC_EnableIRQ>

	TIM3->DIER |= TIM_DIER_UIE;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <enable_interrupt_timer_3+0x2c>)
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <enable_interrupt_timer_3+0x2c>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8000d1a:	b662      	cpsie	i
}
 8000d1c:	bf00      	nop

	__enable_irq();
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40000400 	.word	0x40000400

08000d28 <disable_timer_3_interrupt>:

void disable_timer_3_interrupt(){
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function disables interrupts for timer 2
 */

	TIM3->DIER &= ~TIM_DIER_UIE;
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <disable_timer_3_interrupt+0x1c>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <disable_timer_3_interrupt+0x1c>)
 8000d32:	f023 0301 	bic.w	r3, r3, #1
 8000d36:	60d3      	str	r3, [r2, #12]

}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40000400 	.word	0x40000400

08000d48 <timer_3_set>:

void timer_3_set(uint16_t delay_in_milliseconds){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
 * this function takes in a delay in milliseconds and passes it to the delay_set function.
 * The return of the delay_set function is saved in the variable timer_x_info which is then
 * passed to the timer_initialisation function to start the delay
 */

	timer_info timer_x_info = delay_set(delay_in_milliseconds);
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fe75 	bl	8000a44 <delay_set>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	60fb      	str	r3, [r7, #12]

	timer_3_initialisation(&timer_x_info);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ffa8 	bl	8000cb8 <timer_3_initialisation>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <one_shot>:

void (*one_shot(uint16_t delay_in_milliseconds, void (*func_ptr)()))() {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	80fb      	strh	r3, [r7, #6]
/*
 * function info:
 * this function makes it so that any function can be passed in as a function pointer and when an interrupt occurs
 * the desired function is called
 */
    timer_3_set(delay_in_milliseconds);
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffe2 	bl	8000d48 <timer_3_set>
    enable_interrupt_timer_3();
 8000d84:	f7ff ffb8 	bl	8000cf8 <enable_interrupt_timer_3>

    return func_ptr;
 8000d88:	683b      	ldr	r3, [r7, #0]

}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
	...

08000d94 <LED_all>:





void LED_all (){
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function turns on all LEDs
 */
	uint8_t *LED_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <LED_all+0x20>)
 8000d9c:	607b      	str	r3, [r7, #4]
	uint8_t LED_pattern = 0b11111111;
 8000d9e:	23ff      	movs	r3, #255	; 0xff
 8000da0:	70fb      	strb	r3, [r7, #3]
	*LED_output_register = LED_pattern;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	78fa      	ldrb	r2, [r7, #3]
 8000da6:	701a      	strb	r2, [r3, #0]

}
 8000da8:	bf00      	nop
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	48001015 	.word	0x48001015

08000db8 <LED_off>:

void LED_off (){
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
/*
 * function info:
 * this function turns off all LEDs
 */
	uint8_t *LED_output_register = ((uint8_t*)&(GPIOE->ODR)) + 1;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LED_off+0x20>)
 8000dc0:	607b      	str	r3, [r7, #4]
	uint8_t LED_pattern = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	70fb      	strb	r3, [r7, #3]
	*LED_output_register = LED_pattern;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	701a      	strb	r2, [r3, #0]

}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	48001015 	.word	0x48001015

08000ddc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e0a:	f000 f9ef 	bl	80011ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e0e:	f7ff fa9f 	bl	8000350 <main>

08000e12 <LoopForever>:

LoopForever:
  b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   r0, =_estack
 8000e14:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e20:	08001418 	.word	0x08001418
  ldr r2, =_sbss
 8000e24:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e28:	20000234 	.word	0x20000234

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>

08000e2e <atoi>:
 8000e2e:	220a      	movs	r2, #10
 8000e30:	2100      	movs	r1, #0
 8000e32:	f000 b93f 	b.w	80010b4 <strtol>
	...

08000e38 <malloc>:
 8000e38:	4b02      	ldr	r3, [pc, #8]	; (8000e44 <malloc+0xc>)
 8000e3a:	4601      	mov	r1, r0
 8000e3c:	6818      	ldr	r0, [r3, #0]
 8000e3e:	f000 b82b 	b.w	8000e98 <_malloc_r>
 8000e42:	bf00      	nop
 8000e44:	20000078 	.word	0x20000078

08000e48 <free>:
 8000e48:	4b02      	ldr	r3, [pc, #8]	; (8000e54 <free+0xc>)
 8000e4a:	4601      	mov	r1, r0
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	f000 b9f3 	b.w	8001238 <_free_r>
 8000e52:	bf00      	nop
 8000e54:	20000078 	.word	0x20000078

08000e58 <sbrk_aligned>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	4e0e      	ldr	r6, [pc, #56]	; (8000e94 <sbrk_aligned+0x3c>)
 8000e5c:	460c      	mov	r4, r1
 8000e5e:	6831      	ldr	r1, [r6, #0]
 8000e60:	4605      	mov	r5, r0
 8000e62:	b911      	cbnz	r1, 8000e6a <sbrk_aligned+0x12>
 8000e64:	f000 f9ac 	bl	80011c0 <_sbrk_r>
 8000e68:	6030      	str	r0, [r6, #0]
 8000e6a:	4621      	mov	r1, r4
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f000 f9a7 	bl	80011c0 <_sbrk_r>
 8000e72:	1c43      	adds	r3, r0, #1
 8000e74:	d00a      	beq.n	8000e8c <sbrk_aligned+0x34>
 8000e76:	1cc4      	adds	r4, r0, #3
 8000e78:	f024 0403 	bic.w	r4, r4, #3
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	d007      	beq.n	8000e90 <sbrk_aligned+0x38>
 8000e80:	1a21      	subs	r1, r4, r0
 8000e82:	4628      	mov	r0, r5
 8000e84:	f000 f99c 	bl	80011c0 <_sbrk_r>
 8000e88:	3001      	adds	r0, #1
 8000e8a:	d101      	bne.n	8000e90 <sbrk_aligned+0x38>
 8000e8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000e90:	4620      	mov	r0, r4
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	200000f0 	.word	0x200000f0

08000e98 <_malloc_r>:
 8000e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e9c:	1ccd      	adds	r5, r1, #3
 8000e9e:	f025 0503 	bic.w	r5, r5, #3
 8000ea2:	3508      	adds	r5, #8
 8000ea4:	2d0c      	cmp	r5, #12
 8000ea6:	bf38      	it	cc
 8000ea8:	250c      	movcc	r5, #12
 8000eaa:	2d00      	cmp	r5, #0
 8000eac:	4607      	mov	r7, r0
 8000eae:	db01      	blt.n	8000eb4 <_malloc_r+0x1c>
 8000eb0:	42a9      	cmp	r1, r5
 8000eb2:	d905      	bls.n	8000ec0 <_malloc_r+0x28>
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	2600      	movs	r6, #0
 8000eba:	4630      	mov	r0, r6
 8000ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ec0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f94 <_malloc_r+0xfc>
 8000ec4:	f000 f868 	bl	8000f98 <__malloc_lock>
 8000ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8000ecc:	461c      	mov	r4, r3
 8000ece:	bb5c      	cbnz	r4, 8000f28 <_malloc_r+0x90>
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	4638      	mov	r0, r7
 8000ed4:	f7ff ffc0 	bl	8000e58 <sbrk_aligned>
 8000ed8:	1c43      	adds	r3, r0, #1
 8000eda:	4604      	mov	r4, r0
 8000edc:	d155      	bne.n	8000f8a <_malloc_r+0xf2>
 8000ede:	f8d8 4000 	ldr.w	r4, [r8]
 8000ee2:	4626      	mov	r6, r4
 8000ee4:	2e00      	cmp	r6, #0
 8000ee6:	d145      	bne.n	8000f74 <_malloc_r+0xdc>
 8000ee8:	2c00      	cmp	r4, #0
 8000eea:	d048      	beq.n	8000f7e <_malloc_r+0xe6>
 8000eec:	6823      	ldr	r3, [r4, #0]
 8000eee:	4631      	mov	r1, r6
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	eb04 0903 	add.w	r9, r4, r3
 8000ef6:	f000 f963 	bl	80011c0 <_sbrk_r>
 8000efa:	4581      	cmp	r9, r0
 8000efc:	d13f      	bne.n	8000f7e <_malloc_r+0xe6>
 8000efe:	6821      	ldr	r1, [r4, #0]
 8000f00:	1a6d      	subs	r5, r5, r1
 8000f02:	4629      	mov	r1, r5
 8000f04:	4638      	mov	r0, r7
 8000f06:	f7ff ffa7 	bl	8000e58 <sbrk_aligned>
 8000f0a:	3001      	adds	r0, #1
 8000f0c:	d037      	beq.n	8000f7e <_malloc_r+0xe6>
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	442b      	add	r3, r5
 8000f12:	6023      	str	r3, [r4, #0]
 8000f14:	f8d8 3000 	ldr.w	r3, [r8]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d038      	beq.n	8000f8e <_malloc_r+0xf6>
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	42a2      	cmp	r2, r4
 8000f20:	d12b      	bne.n	8000f7a <_malloc_r+0xe2>
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	e00f      	b.n	8000f48 <_malloc_r+0xb0>
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	1b52      	subs	r2, r2, r5
 8000f2c:	d41f      	bmi.n	8000f6e <_malloc_r+0xd6>
 8000f2e:	2a0b      	cmp	r2, #11
 8000f30:	d917      	bls.n	8000f62 <_malloc_r+0xca>
 8000f32:	1961      	adds	r1, r4, r5
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	6025      	str	r5, [r4, #0]
 8000f38:	bf18      	it	ne
 8000f3a:	6059      	strne	r1, [r3, #4]
 8000f3c:	6863      	ldr	r3, [r4, #4]
 8000f3e:	bf08      	it	eq
 8000f40:	f8c8 1000 	streq.w	r1, [r8]
 8000f44:	5162      	str	r2, [r4, r5]
 8000f46:	604b      	str	r3, [r1, #4]
 8000f48:	4638      	mov	r0, r7
 8000f4a:	f104 060b 	add.w	r6, r4, #11
 8000f4e:	f000 f829 	bl	8000fa4 <__malloc_unlock>
 8000f52:	f026 0607 	bic.w	r6, r6, #7
 8000f56:	1d23      	adds	r3, r4, #4
 8000f58:	1af2      	subs	r2, r6, r3
 8000f5a:	d0ae      	beq.n	8000eba <_malloc_r+0x22>
 8000f5c:	1b9b      	subs	r3, r3, r6
 8000f5e:	50a3      	str	r3, [r4, r2]
 8000f60:	e7ab      	b.n	8000eba <_malloc_r+0x22>
 8000f62:	42a3      	cmp	r3, r4
 8000f64:	6862      	ldr	r2, [r4, #4]
 8000f66:	d1dd      	bne.n	8000f24 <_malloc_r+0x8c>
 8000f68:	f8c8 2000 	str.w	r2, [r8]
 8000f6c:	e7ec      	b.n	8000f48 <_malloc_r+0xb0>
 8000f6e:	4623      	mov	r3, r4
 8000f70:	6864      	ldr	r4, [r4, #4]
 8000f72:	e7ac      	b.n	8000ece <_malloc_r+0x36>
 8000f74:	4634      	mov	r4, r6
 8000f76:	6876      	ldr	r6, [r6, #4]
 8000f78:	e7b4      	b.n	8000ee4 <_malloc_r+0x4c>
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7cc      	b.n	8000f18 <_malloc_r+0x80>
 8000f7e:	230c      	movs	r3, #12
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4638      	mov	r0, r7
 8000f84:	f000 f80e 	bl	8000fa4 <__malloc_unlock>
 8000f88:	e797      	b.n	8000eba <_malloc_r+0x22>
 8000f8a:	6025      	str	r5, [r4, #0]
 8000f8c:	e7dc      	b.n	8000f48 <_malloc_r+0xb0>
 8000f8e:	605b      	str	r3, [r3, #4]
 8000f90:	deff      	udf	#255	; 0xff
 8000f92:	bf00      	nop
 8000f94:	200000ec 	.word	0x200000ec

08000f98 <__malloc_lock>:
 8000f98:	4801      	ldr	r0, [pc, #4]	; (8000fa0 <__malloc_lock+0x8>)
 8000f9a:	f000 b94b 	b.w	8001234 <__retarget_lock_acquire_recursive>
 8000f9e:	bf00      	nop
 8000fa0:	2000022c 	.word	0x2000022c

08000fa4 <__malloc_unlock>:
 8000fa4:	4801      	ldr	r0, [pc, #4]	; (8000fac <__malloc_unlock+0x8>)
 8000fa6:	f000 b946 	b.w	8001236 <__retarget_lock_release_recursive>
 8000faa:	bf00      	nop
 8000fac:	2000022c 	.word	0x2000022c

08000fb0 <_strtol_l.constprop.0>:
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb6:	d001      	beq.n	8000fbc <_strtol_l.constprop.0+0xc>
 8000fb8:	2b24      	cmp	r3, #36	; 0x24
 8000fba:	d906      	bls.n	8000fca <_strtol_l.constprop.0+0x1a>
 8000fbc:	f000 f910 	bl	80011e0 <__errno>
 8000fc0:	2316      	movs	r3, #22
 8000fc2:	6003      	str	r3, [r0, #0]
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80010b0 <_strtol_l.constprop.0+0x100>
 8000fce:	460d      	mov	r5, r1
 8000fd0:	462e      	mov	r6, r5
 8000fd2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8000fd6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8000fda:	f017 0708 	ands.w	r7, r7, #8
 8000fde:	d1f7      	bne.n	8000fd0 <_strtol_l.constprop.0+0x20>
 8000fe0:	2c2d      	cmp	r4, #45	; 0x2d
 8000fe2:	d132      	bne.n	800104a <_strtol_l.constprop.0+0x9a>
 8000fe4:	782c      	ldrb	r4, [r5, #0]
 8000fe6:	2701      	movs	r7, #1
 8000fe8:	1cb5      	adds	r5, r6, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d05b      	beq.n	80010a6 <_strtol_l.constprop.0+0xf6>
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	d109      	bne.n	8001006 <_strtol_l.constprop.0+0x56>
 8000ff2:	2c30      	cmp	r4, #48	; 0x30
 8000ff4:	d107      	bne.n	8001006 <_strtol_l.constprop.0+0x56>
 8000ff6:	782c      	ldrb	r4, [r5, #0]
 8000ff8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8000ffc:	2c58      	cmp	r4, #88	; 0x58
 8000ffe:	d14d      	bne.n	800109c <_strtol_l.constprop.0+0xec>
 8001000:	786c      	ldrb	r4, [r5, #1]
 8001002:	2310      	movs	r3, #16
 8001004:	3502      	adds	r5, #2
 8001006:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800100a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800100e:	f04f 0e00 	mov.w	lr, #0
 8001012:	fbb8 f9f3 	udiv	r9, r8, r3
 8001016:	4676      	mov	r6, lr
 8001018:	fb03 8a19 	mls	sl, r3, r9, r8
 800101c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001020:	f1bc 0f09 	cmp.w	ip, #9
 8001024:	d816      	bhi.n	8001054 <_strtol_l.constprop.0+0xa4>
 8001026:	4664      	mov	r4, ip
 8001028:	42a3      	cmp	r3, r4
 800102a:	dd24      	ble.n	8001076 <_strtol_l.constprop.0+0xc6>
 800102c:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8001030:	d008      	beq.n	8001044 <_strtol_l.constprop.0+0x94>
 8001032:	45b1      	cmp	r9, r6
 8001034:	d31c      	bcc.n	8001070 <_strtol_l.constprop.0+0xc0>
 8001036:	d101      	bne.n	800103c <_strtol_l.constprop.0+0x8c>
 8001038:	45a2      	cmp	sl, r4
 800103a:	db19      	blt.n	8001070 <_strtol_l.constprop.0+0xc0>
 800103c:	fb06 4603 	mla	r6, r6, r3, r4
 8001040:	f04f 0e01 	mov.w	lr, #1
 8001044:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001048:	e7e8      	b.n	800101c <_strtol_l.constprop.0+0x6c>
 800104a:	2c2b      	cmp	r4, #43	; 0x2b
 800104c:	bf04      	itt	eq
 800104e:	782c      	ldrbeq	r4, [r5, #0]
 8001050:	1cb5      	addeq	r5, r6, #2
 8001052:	e7ca      	b.n	8000fea <_strtol_l.constprop.0+0x3a>
 8001054:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001058:	f1bc 0f19 	cmp.w	ip, #25
 800105c:	d801      	bhi.n	8001062 <_strtol_l.constprop.0+0xb2>
 800105e:	3c37      	subs	r4, #55	; 0x37
 8001060:	e7e2      	b.n	8001028 <_strtol_l.constprop.0+0x78>
 8001062:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001066:	f1bc 0f19 	cmp.w	ip, #25
 800106a:	d804      	bhi.n	8001076 <_strtol_l.constprop.0+0xc6>
 800106c:	3c57      	subs	r4, #87	; 0x57
 800106e:	e7db      	b.n	8001028 <_strtol_l.constprop.0+0x78>
 8001070:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8001074:	e7e6      	b.n	8001044 <_strtol_l.constprop.0+0x94>
 8001076:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800107a:	d105      	bne.n	8001088 <_strtol_l.constprop.0+0xd8>
 800107c:	2322      	movs	r3, #34	; 0x22
 800107e:	6003      	str	r3, [r0, #0]
 8001080:	4646      	mov	r6, r8
 8001082:	b942      	cbnz	r2, 8001096 <_strtol_l.constprop.0+0xe6>
 8001084:	4630      	mov	r0, r6
 8001086:	e79e      	b.n	8000fc6 <_strtol_l.constprop.0+0x16>
 8001088:	b107      	cbz	r7, 800108c <_strtol_l.constprop.0+0xdc>
 800108a:	4276      	negs	r6, r6
 800108c:	2a00      	cmp	r2, #0
 800108e:	d0f9      	beq.n	8001084 <_strtol_l.constprop.0+0xd4>
 8001090:	f1be 0f00 	cmp.w	lr, #0
 8001094:	d000      	beq.n	8001098 <_strtol_l.constprop.0+0xe8>
 8001096:	1e69      	subs	r1, r5, #1
 8001098:	6011      	str	r1, [r2, #0]
 800109a:	e7f3      	b.n	8001084 <_strtol_l.constprop.0+0xd4>
 800109c:	2430      	movs	r4, #48	; 0x30
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1b1      	bne.n	8001006 <_strtol_l.constprop.0+0x56>
 80010a2:	2308      	movs	r3, #8
 80010a4:	e7af      	b.n	8001006 <_strtol_l.constprop.0+0x56>
 80010a6:	2c30      	cmp	r4, #48	; 0x30
 80010a8:	d0a5      	beq.n	8000ff6 <_strtol_l.constprop.0+0x46>
 80010aa:	230a      	movs	r3, #10
 80010ac:	e7ab      	b.n	8001006 <_strtol_l.constprop.0+0x56>
 80010ae:	bf00      	nop
 80010b0:	0800130d 	.word	0x0800130d

080010b4 <strtol>:
 80010b4:	4613      	mov	r3, r2
 80010b6:	460a      	mov	r2, r1
 80010b8:	4601      	mov	r1, r0
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <strtol+0x10>)
 80010bc:	6800      	ldr	r0, [r0, #0]
 80010be:	f7ff bf77 	b.w	8000fb0 <_strtol_l.constprop.0>
 80010c2:	bf00      	nop
 80010c4:	20000078 	.word	0x20000078

080010c8 <_strtoul_l.constprop.0>:
 80010c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010cc:	4f36      	ldr	r7, [pc, #216]	; (80011a8 <_strtoul_l.constprop.0+0xe0>)
 80010ce:	4686      	mov	lr, r0
 80010d0:	460d      	mov	r5, r1
 80010d2:	4628      	mov	r0, r5
 80010d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80010d8:	5d3e      	ldrb	r6, [r7, r4]
 80010da:	f016 0608 	ands.w	r6, r6, #8
 80010de:	d1f8      	bne.n	80010d2 <_strtoul_l.constprop.0+0xa>
 80010e0:	2c2d      	cmp	r4, #45	; 0x2d
 80010e2:	d130      	bne.n	8001146 <_strtoul_l.constprop.0+0x7e>
 80010e4:	782c      	ldrb	r4, [r5, #0]
 80010e6:	2601      	movs	r6, #1
 80010e8:	1c85      	adds	r5, r0, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d057      	beq.n	800119e <_strtoul_l.constprop.0+0xd6>
 80010ee:	2b10      	cmp	r3, #16
 80010f0:	d109      	bne.n	8001106 <_strtoul_l.constprop.0+0x3e>
 80010f2:	2c30      	cmp	r4, #48	; 0x30
 80010f4:	d107      	bne.n	8001106 <_strtoul_l.constprop.0+0x3e>
 80010f6:	7828      	ldrb	r0, [r5, #0]
 80010f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80010fc:	2858      	cmp	r0, #88	; 0x58
 80010fe:	d149      	bne.n	8001194 <_strtoul_l.constprop.0+0xcc>
 8001100:	786c      	ldrb	r4, [r5, #1]
 8001102:	2310      	movs	r3, #16
 8001104:	3502      	adds	r5, #2
 8001106:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800110a:	2700      	movs	r7, #0
 800110c:	fbb8 f8f3 	udiv	r8, r8, r3
 8001110:	fb03 f908 	mul.w	r9, r3, r8
 8001114:	ea6f 0909 	mvn.w	r9, r9
 8001118:	4638      	mov	r0, r7
 800111a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800111e:	f1bc 0f09 	cmp.w	ip, #9
 8001122:	d815      	bhi.n	8001150 <_strtoul_l.constprop.0+0x88>
 8001124:	4664      	mov	r4, ip
 8001126:	42a3      	cmp	r3, r4
 8001128:	dd23      	ble.n	8001172 <_strtoul_l.constprop.0+0xaa>
 800112a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800112e:	d007      	beq.n	8001140 <_strtoul_l.constprop.0+0x78>
 8001130:	4580      	cmp	r8, r0
 8001132:	d31b      	bcc.n	800116c <_strtoul_l.constprop.0+0xa4>
 8001134:	d101      	bne.n	800113a <_strtoul_l.constprop.0+0x72>
 8001136:	45a1      	cmp	r9, r4
 8001138:	db18      	blt.n	800116c <_strtoul_l.constprop.0+0xa4>
 800113a:	fb00 4003 	mla	r0, r0, r3, r4
 800113e:	2701      	movs	r7, #1
 8001140:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001144:	e7e9      	b.n	800111a <_strtoul_l.constprop.0+0x52>
 8001146:	2c2b      	cmp	r4, #43	; 0x2b
 8001148:	bf04      	itt	eq
 800114a:	782c      	ldrbeq	r4, [r5, #0]
 800114c:	1c85      	addeq	r5, r0, #2
 800114e:	e7cc      	b.n	80010ea <_strtoul_l.constprop.0+0x22>
 8001150:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001154:	f1bc 0f19 	cmp.w	ip, #25
 8001158:	d801      	bhi.n	800115e <_strtoul_l.constprop.0+0x96>
 800115a:	3c37      	subs	r4, #55	; 0x37
 800115c:	e7e3      	b.n	8001126 <_strtoul_l.constprop.0+0x5e>
 800115e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001162:	f1bc 0f19 	cmp.w	ip, #25
 8001166:	d804      	bhi.n	8001172 <_strtoul_l.constprop.0+0xaa>
 8001168:	3c57      	subs	r4, #87	; 0x57
 800116a:	e7dc      	b.n	8001126 <_strtoul_l.constprop.0+0x5e>
 800116c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001170:	e7e6      	b.n	8001140 <_strtoul_l.constprop.0+0x78>
 8001172:	1c7b      	adds	r3, r7, #1
 8001174:	d106      	bne.n	8001184 <_strtoul_l.constprop.0+0xbc>
 8001176:	2322      	movs	r3, #34	; 0x22
 8001178:	f8ce 3000 	str.w	r3, [lr]
 800117c:	4638      	mov	r0, r7
 800117e:	b932      	cbnz	r2, 800118e <_strtoul_l.constprop.0+0xc6>
 8001180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001184:	b106      	cbz	r6, 8001188 <_strtoul_l.constprop.0+0xc0>
 8001186:	4240      	negs	r0, r0
 8001188:	2a00      	cmp	r2, #0
 800118a:	d0f9      	beq.n	8001180 <_strtoul_l.constprop.0+0xb8>
 800118c:	b107      	cbz	r7, 8001190 <_strtoul_l.constprop.0+0xc8>
 800118e:	1e69      	subs	r1, r5, #1
 8001190:	6011      	str	r1, [r2, #0]
 8001192:	e7f5      	b.n	8001180 <_strtoul_l.constprop.0+0xb8>
 8001194:	2430      	movs	r4, #48	; 0x30
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1b5      	bne.n	8001106 <_strtoul_l.constprop.0+0x3e>
 800119a:	2308      	movs	r3, #8
 800119c:	e7b3      	b.n	8001106 <_strtoul_l.constprop.0+0x3e>
 800119e:	2c30      	cmp	r4, #48	; 0x30
 80011a0:	d0a9      	beq.n	80010f6 <_strtoul_l.constprop.0+0x2e>
 80011a2:	230a      	movs	r3, #10
 80011a4:	e7af      	b.n	8001106 <_strtoul_l.constprop.0+0x3e>
 80011a6:	bf00      	nop
 80011a8:	0800130d 	.word	0x0800130d

080011ac <strtoul>:
 80011ac:	4613      	mov	r3, r2
 80011ae:	460a      	mov	r2, r1
 80011b0:	4601      	mov	r1, r0
 80011b2:	4802      	ldr	r0, [pc, #8]	; (80011bc <strtoul+0x10>)
 80011b4:	6800      	ldr	r0, [r0, #0]
 80011b6:	f7ff bf87 	b.w	80010c8 <_strtoul_l.constprop.0>
 80011ba:	bf00      	nop
 80011bc:	20000078 	.word	0x20000078

080011c0 <_sbrk_r>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	4d06      	ldr	r5, [pc, #24]	; (80011dc <_sbrk_r+0x1c>)
 80011c4:	2300      	movs	r3, #0
 80011c6:	4604      	mov	r4, r0
 80011c8:	4608      	mov	r0, r1
 80011ca:	602b      	str	r3, [r5, #0]
 80011cc:	f7ff fb7c 	bl	80008c8 <_sbrk>
 80011d0:	1c43      	adds	r3, r0, #1
 80011d2:	d102      	bne.n	80011da <_sbrk_r+0x1a>
 80011d4:	682b      	ldr	r3, [r5, #0]
 80011d6:	b103      	cbz	r3, 80011da <_sbrk_r+0x1a>
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	20000230 	.word	0x20000230

080011e0 <__errno>:
 80011e0:	4b01      	ldr	r3, [pc, #4]	; (80011e8 <__errno+0x8>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000078 	.word	0x20000078

080011ec <__libc_init_array>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	4d0d      	ldr	r5, [pc, #52]	; (8001224 <__libc_init_array+0x38>)
 80011f0:	4c0d      	ldr	r4, [pc, #52]	; (8001228 <__libc_init_array+0x3c>)
 80011f2:	1b64      	subs	r4, r4, r5
 80011f4:	10a4      	asrs	r4, r4, #2
 80011f6:	2600      	movs	r6, #0
 80011f8:	42a6      	cmp	r6, r4
 80011fa:	d109      	bne.n	8001210 <__libc_init_array+0x24>
 80011fc:	4d0b      	ldr	r5, [pc, #44]	; (800122c <__libc_init_array+0x40>)
 80011fe:	4c0c      	ldr	r4, [pc, #48]	; (8001230 <__libc_init_array+0x44>)
 8001200:	f000 f866 	bl	80012d0 <_init>
 8001204:	1b64      	subs	r4, r4, r5
 8001206:	10a4      	asrs	r4, r4, #2
 8001208:	2600      	movs	r6, #0
 800120a:	42a6      	cmp	r6, r4
 800120c:	d105      	bne.n	800121a <__libc_init_array+0x2e>
 800120e:	bd70      	pop	{r4, r5, r6, pc}
 8001210:	f855 3b04 	ldr.w	r3, [r5], #4
 8001214:	4798      	blx	r3
 8001216:	3601      	adds	r6, #1
 8001218:	e7ee      	b.n	80011f8 <__libc_init_array+0xc>
 800121a:	f855 3b04 	ldr.w	r3, [r5], #4
 800121e:	4798      	blx	r3
 8001220:	3601      	adds	r6, #1
 8001222:	e7f2      	b.n	800120a <__libc_init_array+0x1e>
 8001224:	08001410 	.word	0x08001410
 8001228:	08001410 	.word	0x08001410
 800122c:	08001410 	.word	0x08001410
 8001230:	08001414 	.word	0x08001414

08001234 <__retarget_lock_acquire_recursive>:
 8001234:	4770      	bx	lr

08001236 <__retarget_lock_release_recursive>:
 8001236:	4770      	bx	lr

08001238 <_free_r>:
 8001238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800123a:	2900      	cmp	r1, #0
 800123c:	d044      	beq.n	80012c8 <_free_r+0x90>
 800123e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001242:	9001      	str	r0, [sp, #4]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f1a1 0404 	sub.w	r4, r1, #4
 800124a:	bfb8      	it	lt
 800124c:	18e4      	addlt	r4, r4, r3
 800124e:	f7ff fea3 	bl	8000f98 <__malloc_lock>
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <_free_r+0x94>)
 8001254:	9801      	ldr	r0, [sp, #4]
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	b933      	cbnz	r3, 8001268 <_free_r+0x30>
 800125a:	6063      	str	r3, [r4, #4]
 800125c:	6014      	str	r4, [r2, #0]
 800125e:	b003      	add	sp, #12
 8001260:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001264:	f7ff be9e 	b.w	8000fa4 <__malloc_unlock>
 8001268:	42a3      	cmp	r3, r4
 800126a:	d908      	bls.n	800127e <_free_r+0x46>
 800126c:	6825      	ldr	r5, [r4, #0]
 800126e:	1961      	adds	r1, r4, r5
 8001270:	428b      	cmp	r3, r1
 8001272:	bf01      	itttt	eq
 8001274:	6819      	ldreq	r1, [r3, #0]
 8001276:	685b      	ldreq	r3, [r3, #4]
 8001278:	1949      	addeq	r1, r1, r5
 800127a:	6021      	streq	r1, [r4, #0]
 800127c:	e7ed      	b.n	800125a <_free_r+0x22>
 800127e:	461a      	mov	r2, r3
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	b10b      	cbz	r3, 8001288 <_free_r+0x50>
 8001284:	42a3      	cmp	r3, r4
 8001286:	d9fa      	bls.n	800127e <_free_r+0x46>
 8001288:	6811      	ldr	r1, [r2, #0]
 800128a:	1855      	adds	r5, r2, r1
 800128c:	42a5      	cmp	r5, r4
 800128e:	d10b      	bne.n	80012a8 <_free_r+0x70>
 8001290:	6824      	ldr	r4, [r4, #0]
 8001292:	4421      	add	r1, r4
 8001294:	1854      	adds	r4, r2, r1
 8001296:	42a3      	cmp	r3, r4
 8001298:	6011      	str	r1, [r2, #0]
 800129a:	d1e0      	bne.n	800125e <_free_r+0x26>
 800129c:	681c      	ldr	r4, [r3, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	6053      	str	r3, [r2, #4]
 80012a2:	440c      	add	r4, r1
 80012a4:	6014      	str	r4, [r2, #0]
 80012a6:	e7da      	b.n	800125e <_free_r+0x26>
 80012a8:	d902      	bls.n	80012b0 <_free_r+0x78>
 80012aa:	230c      	movs	r3, #12
 80012ac:	6003      	str	r3, [r0, #0]
 80012ae:	e7d6      	b.n	800125e <_free_r+0x26>
 80012b0:	6825      	ldr	r5, [r4, #0]
 80012b2:	1961      	adds	r1, r4, r5
 80012b4:	428b      	cmp	r3, r1
 80012b6:	bf04      	itt	eq
 80012b8:	6819      	ldreq	r1, [r3, #0]
 80012ba:	685b      	ldreq	r3, [r3, #4]
 80012bc:	6063      	str	r3, [r4, #4]
 80012be:	bf04      	itt	eq
 80012c0:	1949      	addeq	r1, r1, r5
 80012c2:	6021      	streq	r1, [r4, #0]
 80012c4:	6054      	str	r4, [r2, #4]
 80012c6:	e7ca      	b.n	800125e <_free_r+0x26>
 80012c8:	b003      	add	sp, #12
 80012ca:	bd30      	pop	{r4, r5, pc}
 80012cc:	200000ec 	.word	0x200000ec

080012d0 <_init>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	bf00      	nop
 80012d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d6:	bc08      	pop	{r3}
 80012d8:	469e      	mov	lr, r3
 80012da:	4770      	bx	lr

080012dc <_fini>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	bf00      	nop
 80012e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e2:	bc08      	pop	{r3}
 80012e4:	469e      	mov	lr, r3
 80012e6:	4770      	bx	lr
